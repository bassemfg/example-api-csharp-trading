/* 
 * Tradovate MarketData API
 *
 * Tradovate MarketData API provides an access to the complete set of Tradovate market data functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.MarketData.Services.Client.SwaggerDateConverter;

namespace Tradovate.MarketData.Services.Model
{
    /// <summary>
    /// BasicChartDescription
    /// </summary>
    [DataContract]
        public partial class BasicChartDescription :  IEquatable<BasicChartDescription>, IValidatableObject
    {
        /// <summary>
        /// Custom, DOM, DailyBar, MinuteBar, Tick
        /// </summary>
        /// <value>Custom, DOM, DailyBar, MinuteBar, Tick</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnderlyingTypeEnum
        {
            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 1,
            /// <summary>
            /// Enum DOM for value: DOM
            /// </summary>
            [EnumMember(Value = "DOM")]
            DOM = 2,
            /// <summary>
            /// Enum DailyBar for value: DailyBar
            /// </summary>
            [EnumMember(Value = "DailyBar")]
            DailyBar = 3,
            /// <summary>
            /// Enum MinuteBar for value: MinuteBar
            /// </summary>
            [EnumMember(Value = "MinuteBar")]
            MinuteBar = 4,
            /// <summary>
            /// Enum Tick for value: Tick
            /// </summary>
            [EnumMember(Value = "Tick")]
            Tick = 5        }
        /// <summary>
        /// Custom, DOM, DailyBar, MinuteBar, Tick
        /// </summary>
        /// <value>Custom, DOM, DailyBar, MinuteBar, Tick</value>
        [DataMember(Name="underlyingType", EmitDefaultValue=false)]
        public UnderlyingTypeEnum UnderlyingType { get; set; }
        /// <summary>
        /// MomentumRange, OFARange, PointAndFigure, Range, Renko, Seconds, UnderlyingUnits, Volume
        /// </summary>
        /// <value>MomentumRange, OFARange, PointAndFigure, Range, Renko, Seconds, UnderlyingUnits, Volume</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ElementSizeUnitEnum
        {
            /// <summary>
            /// Enum MomentumRange for value: MomentumRange
            /// </summary>
            [EnumMember(Value = "MomentumRange")]
            MomentumRange = 1,
            /// <summary>
            /// Enum OFARange for value: OFARange
            /// </summary>
            [EnumMember(Value = "OFARange")]
            OFARange = 2,
            /// <summary>
            /// Enum PointAndFigure for value: PointAndFigure
            /// </summary>
            [EnumMember(Value = "PointAndFigure")]
            PointAndFigure = 3,
            /// <summary>
            /// Enum Range for value: Range
            /// </summary>
            [EnumMember(Value = "Range")]
            Range = 4,
            /// <summary>
            /// Enum Renko for value: Renko
            /// </summary>
            [EnumMember(Value = "Renko")]
            Renko = 5,
            /// <summary>
            /// Enum Seconds for value: Seconds
            /// </summary>
            [EnumMember(Value = "Seconds")]
            Seconds = 6,
            /// <summary>
            /// Enum UnderlyingUnits for value: UnderlyingUnits
            /// </summary>
            [EnumMember(Value = "UnderlyingUnits")]
            UnderlyingUnits = 7,
            /// <summary>
            /// Enum Volume for value: Volume
            /// </summary>
            [EnumMember(Value = "Volume")]
            Volume = 8        }
        /// <summary>
        /// MomentumRange, OFARange, PointAndFigure, Range, Renko, Seconds, UnderlyingUnits, Volume
        /// </summary>
        /// <value>MomentumRange, OFARange, PointAndFigure, Range, Renko, Seconds, UnderlyingUnits, Volume</value>
        [DataMember(Name="elementSizeUnit", EmitDefaultValue=false)]
        public ElementSizeUnitEnum ElementSizeUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicChartDescription" /> class.
        /// </summary>
        /// <param name="underlyingType">Custom, DOM, DailyBar, MinuteBar, Tick (required).</param>
        /// <param name="elementSize">elementSize (required).</param>
        /// <param name="elementSizeUnit">MomentumRange, OFARange, PointAndFigure, Range, Renko, Seconds, UnderlyingUnits, Volume (required).</param>
        /// <param name="elementSize2">elementSize2.</param>
        public BasicChartDescription(UnderlyingTypeEnum underlyingType = default(UnderlyingTypeEnum), int? elementSize = default(int?), ElementSizeUnitEnum elementSizeUnit = default(ElementSizeUnitEnum), int? elementSize2 = default(int?))
        {
            // to ensure "underlyingType" is required (not null)
            if (underlyingType == null)
            {
                throw new InvalidDataException("underlyingType is a required property for BasicChartDescription and cannot be null");
            }
            else
            {
                this.UnderlyingType = underlyingType;
            }
            // to ensure "elementSize" is required (not null)
            if (elementSize == null)
            {
                throw new InvalidDataException("elementSize is a required property for BasicChartDescription and cannot be null");
            }
            else
            {
                this.ElementSize = elementSize;
            }
            // to ensure "elementSizeUnit" is required (not null)
            if (elementSizeUnit == null)
            {
                throw new InvalidDataException("elementSizeUnit is a required property for BasicChartDescription and cannot be null");
            }
            else
            {
                this.ElementSizeUnit = elementSizeUnit;
            }
            this.ElementSize2 = elementSize2;
        }
        

        /// <summary>
        /// Gets or Sets ElementSize
        /// </summary>
        [DataMember(Name="elementSize", EmitDefaultValue=false)]
        public int? ElementSize { get; set; }


        /// <summary>
        /// Gets or Sets ElementSize2
        /// </summary>
        [DataMember(Name="elementSize2", EmitDefaultValue=false)]
        public int? ElementSize2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicChartDescription {\n");
            sb.Append("  UnderlyingType: ").Append(UnderlyingType).Append("\n");
            sb.Append("  ElementSize: ").Append(ElementSize).Append("\n");
            sb.Append("  ElementSizeUnit: ").Append(ElementSizeUnit).Append("\n");
            sb.Append("  ElementSize2: ").Append(ElementSize2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicChartDescription);
        }

        /// <summary>
        /// Returns true if BasicChartDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicChartDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicChartDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnderlyingType == input.UnderlyingType ||
                    (this.UnderlyingType != null &&
                    this.UnderlyingType.Equals(input.UnderlyingType))
                ) && 
                (
                    this.ElementSize == input.ElementSize ||
                    (this.ElementSize != null &&
                    this.ElementSize.Equals(input.ElementSize))
                ) && 
                (
                    this.ElementSizeUnit == input.ElementSizeUnit ||
                    (this.ElementSizeUnit != null &&
                    this.ElementSizeUnit.Equals(input.ElementSizeUnit))
                ) && 
                (
                    this.ElementSize2 == input.ElementSize2 ||
                    (this.ElementSize2 != null &&
                    this.ElementSize2.Equals(input.ElementSize2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnderlyingType != null)
                    hashCode = hashCode * 59 + this.UnderlyingType.GetHashCode();
                if (this.ElementSize != null)
                    hashCode = hashCode * 59 + this.ElementSize.GetHashCode();
                if (this.ElementSizeUnit != null)
                    hashCode = hashCode * 59 + this.ElementSizeUnit.GetHashCode();
                if (this.ElementSize2 != null)
                    hashCode = hashCode * 59 + this.ElementSize2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
