/* 
 * Tradovate MarketData API
 *
 * Tradovate MarketData API provides an access to the complete set of Tradovate market data functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.MarketData.Services.Client.SwaggerDateConverter;

namespace Tradovate.MarketData.Services.Model
{
    /// <summary>
    /// MarketDataSubscriptionResult
    /// </summary>
    [DataContract]
        public partial class MarketDataSubscriptionResult :  IEquatable<MarketDataSubscriptionResult>, IValidatableObject
    {
        /// <summary>
        /// NoServicePlan, OperationNotSupported, Success, UnknownReason, UnknownSymbol
        /// </summary>
        /// <value>NoServicePlan, OperationNotSupported, Success, UnknownReason, UnknownSymbol</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ErrorCodeEnum
        {
            /// <summary>
            /// Enum NoServicePlan for value: NoServicePlan
            /// </summary>
            [EnumMember(Value = "NoServicePlan")]
            NoServicePlan = 1,
            /// <summary>
            /// Enum OperationNotSupported for value: OperationNotSupported
            /// </summary>
            [EnumMember(Value = "OperationNotSupported")]
            OperationNotSupported = 2,
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 3,
            /// <summary>
            /// Enum UnknownReason for value: UnknownReason
            /// </summary>
            [EnumMember(Value = "UnknownReason")]
            UnknownReason = 4,
            /// <summary>
            /// Enum UnknownSymbol for value: UnknownSymbol
            /// </summary>
            [EnumMember(Value = "UnknownSymbol")]
            UnknownSymbol = 5        }
        /// <summary>
        /// NoServicePlan, OperationNotSupported, Success, UnknownReason, UnknownSymbol
        /// </summary>
        /// <value>NoServicePlan, OperationNotSupported, Success, UnknownReason, UnknownSymbol</value>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public ErrorCodeEnum? ErrorCode { get; set; }
        /// <summary>
        /// Delayed, None, RealTime
        /// </summary>
        /// <value>Delayed, None, RealTime</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ModeEnum
        {
            /// <summary>
            /// Enum Delayed for value: Delayed
            /// </summary>
            [EnumMember(Value = "Delayed")]
            Delayed = 1,
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 2,
            /// <summary>
            /// Enum RealTime for value: RealTime
            /// </summary>
            [EnumMember(Value = "RealTime")]
            RealTime = 3        }
        /// <summary>
        /// Delayed, None, RealTime
        /// </summary>
        /// <value>Delayed, None, RealTime</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataSubscriptionResult" /> class.
        /// </summary>
        /// <param name="errorText">Non-empty if the request failed.</param>
        /// <param name="errorCode">NoServicePlan, OperationNotSupported, Success, UnknownReason, UnknownSymbol.</param>
        /// <param name="mode">Delayed, None, RealTime (required).</param>
        /// <param name="subscriptionId">subscriptionId.</param>
        public MarketDataSubscriptionResult(string errorText = default(string), ErrorCodeEnum? errorCode = default(ErrorCodeEnum?), ModeEnum mode = default(ModeEnum), int? subscriptionId = default(int?))
        {
            // to ensure "mode" is required (not null)
            if (mode == null)
            {
                throw new InvalidDataException("mode is a required property for MarketDataSubscriptionResult and cannot be null");
            }
            else
            {
                this.Mode = mode;
            }
            this.ErrorText = errorText;
            this.ErrorCode = errorCode;
            this.SubscriptionId = subscriptionId;
        }
        
        /// <summary>
        /// Non-empty if the request failed
        /// </summary>
        /// <value>Non-empty if the request failed</value>
        [DataMember(Name="errorText", EmitDefaultValue=false)]
        public string ErrorText { get; set; }



        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name="subscriptionId", EmitDefaultValue=false)]
        public int? SubscriptionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketDataSubscriptionResult {\n");
            sb.Append("  ErrorText: ").Append(ErrorText).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketDataSubscriptionResult);
        }

        /// <summary>
        /// Returns true if MarketDataSubscriptionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketDataSubscriptionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketDataSubscriptionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorText == input.ErrorText ||
                    (this.ErrorText != null &&
                    this.ErrorText.Equals(input.ErrorText))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorText != null)
                    hashCode = hashCode * 59 + this.ErrorText.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
