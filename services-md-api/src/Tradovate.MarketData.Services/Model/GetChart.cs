/* 
 * Tradovate MarketData API
 *
 * Tradovate MarketData API provides an access to the complete set of Tradovate market data functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.MarketData.Services.Client.SwaggerDateConverter;

namespace Tradovate.MarketData.Services.Model
{
    /// <summary>
    /// GetChart
    /// </summary>
    [DataContract]
        public partial class GetChart :  IEquatable<GetChart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetChart" /> class.
        /// </summary>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="chartDescription">chartDescription (required).</param>
        /// <param name="timeRange">timeRange (required).</param>
        /// <param name="customSession">customSession.</param>
        public GetChart(string symbol = default(string), ChartDescription chartDescription = default(ChartDescription), ChartTimeRange timeRange = default(ChartTimeRange), ChartCustomSession customSession = default(ChartCustomSession))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for GetChart and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            // to ensure "chartDescription" is required (not null)
            if (chartDescription == null)
            {
                throw new InvalidDataException("chartDescription is a required property for GetChart and cannot be null");
            }
            else
            {
                this.ChartDescription = chartDescription;
            }
            // to ensure "timeRange" is required (not null)
            if (timeRange == null)
            {
                throw new InvalidDataException("timeRange is a required property for GetChart and cannot be null");
            }
            else
            {
                this.TimeRange = timeRange;
            }
            this.CustomSession = customSession;
        }
        
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets ChartDescription
        /// </summary>
        [DataMember(Name="chartDescription", EmitDefaultValue=false)]
        public ChartDescription ChartDescription { get; set; }

        /// <summary>
        /// Gets or Sets TimeRange
        /// </summary>
        [DataMember(Name="timeRange", EmitDefaultValue=false)]
        public ChartTimeRange TimeRange { get; set; }

        /// <summary>
        /// Gets or Sets CustomSession
        /// </summary>
        [DataMember(Name="customSession", EmitDefaultValue=false)]
        public ChartCustomSession CustomSession { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetChart {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  ChartDescription: ").Append(ChartDescription).Append("\n");
            sb.Append("  TimeRange: ").Append(TimeRange).Append("\n");
            sb.Append("  CustomSession: ").Append(CustomSession).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetChart);
        }

        /// <summary>
        /// Returns true if GetChart instances are equal
        /// </summary>
        /// <param name="input">Instance of GetChart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetChart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.ChartDescription == input.ChartDescription ||
                    (this.ChartDescription != null &&
                    this.ChartDescription.Equals(input.ChartDescription))
                ) && 
                (
                    this.TimeRange == input.TimeRange ||
                    (this.TimeRange != null &&
                    this.TimeRange.Equals(input.TimeRange))
                ) && 
                (
                    this.CustomSession == input.CustomSession ||
                    (this.CustomSession != null &&
                    this.CustomSession.Equals(input.CustomSession))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.ChartDescription != null)
                    hashCode = hashCode * 59 + this.ChartDescription.GetHashCode();
                if (this.TimeRange != null)
                    hashCode = hashCode * 59 + this.TimeRange.GetHashCode();
                if (this.CustomSession != null)
                    hashCode = hashCode * 59 + this.CustomSession.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
