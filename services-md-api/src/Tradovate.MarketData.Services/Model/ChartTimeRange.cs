/* 
 * Tradovate MarketData API
 *
 * Tradovate MarketData API provides an access to the complete set of Tradovate market data functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.MarketData.Services.Client.SwaggerDateConverter;

namespace Tradovate.MarketData.Services.Model
{
    /// <summary>
    /// ChartTimeRange
    /// </summary>
    [DataContract]
        public partial class ChartTimeRange :  IEquatable<ChartTimeRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartTimeRange" /> class.
        /// </summary>
        /// <param name="closestTimestamp">closestTimestamp.</param>
        /// <param name="closestTickId">closestTickId.</param>
        /// <param name="asFarAsTimestamp">asFarAsTimestamp.</param>
        /// <param name="asMuchAsElements">asMuchAsElements.</param>
        public ChartTimeRange(DateTime? closestTimestamp = default(DateTime?), int? closestTickId = default(int?), DateTime? asFarAsTimestamp = default(DateTime?), int? asMuchAsElements = default(int?))
        {
            this.ClosestTimestamp = closestTimestamp;
            this.ClosestTickId = closestTickId;
            this.AsFarAsTimestamp = asFarAsTimestamp;
            this.AsMuchAsElements = asMuchAsElements;
        }
        
        /// <summary>
        /// Gets or Sets ClosestTimestamp
        /// </summary>
        [DataMember(Name="closestTimestamp", EmitDefaultValue=false)]
        public DateTime? ClosestTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets ClosestTickId
        /// </summary>
        [DataMember(Name="closestTickId", EmitDefaultValue=false)]
        public int? ClosestTickId { get; set; }

        /// <summary>
        /// Gets or Sets AsFarAsTimestamp
        /// </summary>
        [DataMember(Name="asFarAsTimestamp", EmitDefaultValue=false)]
        public DateTime? AsFarAsTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets AsMuchAsElements
        /// </summary>
        [DataMember(Name="asMuchAsElements", EmitDefaultValue=false)]
        public int? AsMuchAsElements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChartTimeRange {\n");
            sb.Append("  ClosestTimestamp: ").Append(ClosestTimestamp).Append("\n");
            sb.Append("  ClosestTickId: ").Append(ClosestTickId).Append("\n");
            sb.Append("  AsFarAsTimestamp: ").Append(AsFarAsTimestamp).Append("\n");
            sb.Append("  AsMuchAsElements: ").Append(AsMuchAsElements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChartTimeRange);
        }

        /// <summary>
        /// Returns true if ChartTimeRange instances are equal
        /// </summary>
        /// <param name="input">Instance of ChartTimeRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartTimeRange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClosestTimestamp == input.ClosestTimestamp ||
                    (this.ClosestTimestamp != null &&
                    this.ClosestTimestamp.Equals(input.ClosestTimestamp))
                ) && 
                (
                    this.ClosestTickId == input.ClosestTickId ||
                    (this.ClosestTickId != null &&
                    this.ClosestTickId.Equals(input.ClosestTickId))
                ) && 
                (
                    this.AsFarAsTimestamp == input.AsFarAsTimestamp ||
                    (this.AsFarAsTimestamp != null &&
                    this.AsFarAsTimestamp.Equals(input.AsFarAsTimestamp))
                ) && 
                (
                    this.AsMuchAsElements == input.AsMuchAsElements ||
                    (this.AsMuchAsElements != null &&
                    this.AsMuchAsElements.Equals(input.AsMuchAsElements))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClosestTimestamp != null)
                    hashCode = hashCode * 59 + this.ClosestTimestamp.GetHashCode();
                if (this.ClosestTickId != null)
                    hashCode = hashCode * 59 + this.ClosestTickId.GetHashCode();
                if (this.AsFarAsTimestamp != null)
                    hashCode = hashCode * 59 + this.AsFarAsTimestamp.GetHashCode();
                if (this.AsMuchAsElements != null)
                    hashCode = hashCode * 59 + this.AsMuchAsElements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
