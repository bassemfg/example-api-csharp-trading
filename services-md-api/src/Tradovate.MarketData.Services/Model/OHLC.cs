/* 
 * Tradovate MarketData API
 *
 * Tradovate MarketData API provides an access to the complete set of Tradovate market data functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.MarketData.Services.Client.SwaggerDateConverter;

namespace Tradovate.MarketData.Services.Model
{
    /// <summary>
    /// OHLC
    /// </summary>
    [DataContract]
        public partial class OHLC :  IEquatable<OHLC>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OHLC" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="open">open (required).</param>
        /// <param name="high">high (required).</param>
        /// <param name="low">low (required).</param>
        /// <param name="close">close (required).</param>
        /// <param name="upVolume">upVolume (required).</param>
        /// <param name="downVolume">downVolume (required).</param>
        /// <param name="upTicks">upTicks (required).</param>
        /// <param name="downTicks">downTicks (required).</param>
        /// <param name="histogram">histogram (required).</param>
        /// <param name="bidVolume">bidVolume (required).</param>
        /// <param name="offerVolume">offerVolume (required).</param>
        public OHLC(DateTime? timestamp = default(DateTime?), double? open = default(double?), double? high = default(double?), double? low = default(double?), double? close = default(double?), int? upVolume = default(int?), int? downVolume = default(int?), int? upTicks = default(int?), int? downTicks = default(int?), string histogram = default(string), int? bidVolume = default(int?), int? offerVolume = default(int?))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for OHLC and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "open" is required (not null)
            if (open == null)
            {
                throw new InvalidDataException("open is a required property for OHLC and cannot be null");
            }
            else
            {
                this.Open = open;
            }
            // to ensure "high" is required (not null)
            if (high == null)
            {
                throw new InvalidDataException("high is a required property for OHLC and cannot be null");
            }
            else
            {
                this.High = high;
            }
            // to ensure "low" is required (not null)
            if (low == null)
            {
                throw new InvalidDataException("low is a required property for OHLC and cannot be null");
            }
            else
            {
                this.Low = low;
            }
            // to ensure "close" is required (not null)
            if (close == null)
            {
                throw new InvalidDataException("close is a required property for OHLC and cannot be null");
            }
            else
            {
                this.Close = close;
            }
            // to ensure "upVolume" is required (not null)
            if (upVolume == null)
            {
                throw new InvalidDataException("upVolume is a required property for OHLC and cannot be null");
            }
            else
            {
                this.UpVolume = upVolume;
            }
            // to ensure "downVolume" is required (not null)
            if (downVolume == null)
            {
                throw new InvalidDataException("downVolume is a required property for OHLC and cannot be null");
            }
            else
            {
                this.DownVolume = downVolume;
            }
            // to ensure "upTicks" is required (not null)
            if (upTicks == null)
            {
                throw new InvalidDataException("upTicks is a required property for OHLC and cannot be null");
            }
            else
            {
                this.UpTicks = upTicks;
            }
            // to ensure "downTicks" is required (not null)
            if (downTicks == null)
            {
                throw new InvalidDataException("downTicks is a required property for OHLC and cannot be null");
            }
            else
            {
                this.DownTicks = downTicks;
            }
            // to ensure "histogram" is required (not null)
            if (histogram == null)
            {
                throw new InvalidDataException("histogram is a required property for OHLC and cannot be null");
            }
            else
            {
                this.Histogram = histogram;
            }
            // to ensure "bidVolume" is required (not null)
            if (bidVolume == null)
            {
                throw new InvalidDataException("bidVolume is a required property for OHLC and cannot be null");
            }
            else
            {
                this.BidVolume = bidVolume;
            }
            // to ensure "offerVolume" is required (not null)
            if (offerVolume == null)
            {
                throw new InvalidDataException("offerVolume is a required property for OHLC and cannot be null");
            }
            else
            {
                this.OfferVolume = offerVolume;
            }
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Open
        /// </summary>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public double? Open { get; set; }

        /// <summary>
        /// Gets or Sets High
        /// </summary>
        [DataMember(Name="high", EmitDefaultValue=false)]
        public double? High { get; set; }

        /// <summary>
        /// Gets or Sets Low
        /// </summary>
        [DataMember(Name="low", EmitDefaultValue=false)]
        public double? Low { get; set; }

        /// <summary>
        /// Gets or Sets Close
        /// </summary>
        [DataMember(Name="close", EmitDefaultValue=false)]
        public double? Close { get; set; }

        /// <summary>
        /// Gets or Sets UpVolume
        /// </summary>
        [DataMember(Name="upVolume", EmitDefaultValue=false)]
        public int? UpVolume { get; set; }

        /// <summary>
        /// Gets or Sets DownVolume
        /// </summary>
        [DataMember(Name="downVolume", EmitDefaultValue=false)]
        public int? DownVolume { get; set; }

        /// <summary>
        /// Gets or Sets UpTicks
        /// </summary>
        [DataMember(Name="upTicks", EmitDefaultValue=false)]
        public int? UpTicks { get; set; }

        /// <summary>
        /// Gets or Sets DownTicks
        /// </summary>
        [DataMember(Name="downTicks", EmitDefaultValue=false)]
        public int? DownTicks { get; set; }

        /// <summary>
        /// Gets or Sets Histogram
        /// </summary>
        [DataMember(Name="histogram", EmitDefaultValue=false)]
        public string Histogram { get; set; }

        /// <summary>
        /// Gets or Sets BidVolume
        /// </summary>
        [DataMember(Name="bidVolume", EmitDefaultValue=false)]
        public int? BidVolume { get; set; }

        /// <summary>
        /// Gets or Sets OfferVolume
        /// </summary>
        [DataMember(Name="offerVolume", EmitDefaultValue=false)]
        public int? OfferVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OHLC {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("  UpVolume: ").Append(UpVolume).Append("\n");
            sb.Append("  DownVolume: ").Append(DownVolume).Append("\n");
            sb.Append("  UpTicks: ").Append(UpTicks).Append("\n");
            sb.Append("  DownTicks: ").Append(DownTicks).Append("\n");
            sb.Append("  Histogram: ").Append(Histogram).Append("\n");
            sb.Append("  BidVolume: ").Append(BidVolume).Append("\n");
            sb.Append("  OfferVolume: ").Append(OfferVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OHLC);
        }

        /// <summary>
        /// Returns true if OHLC instances are equal
        /// </summary>
        /// <param name="input">Instance of OHLC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OHLC input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.Close == input.Close ||
                    (this.Close != null &&
                    this.Close.Equals(input.Close))
                ) && 
                (
                    this.UpVolume == input.UpVolume ||
                    (this.UpVolume != null &&
                    this.UpVolume.Equals(input.UpVolume))
                ) && 
                (
                    this.DownVolume == input.DownVolume ||
                    (this.DownVolume != null &&
                    this.DownVolume.Equals(input.DownVolume))
                ) && 
                (
                    this.UpTicks == input.UpTicks ||
                    (this.UpTicks != null &&
                    this.UpTicks.Equals(input.UpTicks))
                ) && 
                (
                    this.DownTicks == input.DownTicks ||
                    (this.DownTicks != null &&
                    this.DownTicks.Equals(input.DownTicks))
                ) && 
                (
                    this.Histogram == input.Histogram ||
                    (this.Histogram != null &&
                    this.Histogram.Equals(input.Histogram))
                ) && 
                (
                    this.BidVolume == input.BidVolume ||
                    (this.BidVolume != null &&
                    this.BidVolume.Equals(input.BidVolume))
                ) && 
                (
                    this.OfferVolume == input.OfferVolume ||
                    (this.OfferVolume != null &&
                    this.OfferVolume.Equals(input.OfferVolume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.Close != null)
                    hashCode = hashCode * 59 + this.Close.GetHashCode();
                if (this.UpVolume != null)
                    hashCode = hashCode * 59 + this.UpVolume.GetHashCode();
                if (this.DownVolume != null)
                    hashCode = hashCode * 59 + this.DownVolume.GetHashCode();
                if (this.UpTicks != null)
                    hashCode = hashCode * 59 + this.UpTicks.GetHashCode();
                if (this.DownTicks != null)
                    hashCode = hashCode * 59 + this.DownTicks.GetHashCode();
                if (this.Histogram != null)
                    hashCode = hashCode * 59 + this.Histogram.GetHashCode();
                if (this.BidVolume != null)
                    hashCode = hashCode * 59 + this.BidVolume.GetHashCode();
                if (this.OfferVolume != null)
                    hashCode = hashCode * 59 + this.OfferVolume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
