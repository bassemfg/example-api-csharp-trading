/* 
 * Tradovate MarketData API
 *
 * Tradovate MarketData API provides an access to the complete set of Tradovate market data functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.MarketData.Services.Client.SwaggerDateConverter;

namespace Tradovate.MarketData.Services.Model
{
    /// <summary>
    /// ChartCustomSession
    /// </summary>
    [DataContract]
        public partial class ChartCustomSession :  IEquatable<ChartCustomSession>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartCustomSession" /> class.
        /// </summary>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="stopTime">stopTime (required).</param>
        public ChartCustomSession(TradeTime startTime = default(TradeTime), TradeTime stopTime = default(TradeTime))
        {
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for ChartCustomSession and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }
            // to ensure "stopTime" is required (not null)
            if (stopTime == null)
            {
                throw new InvalidDataException("stopTime is a required property for ChartCustomSession and cannot be null");
            }
            else
            {
                this.StopTime = stopTime;
            }
        }
        
        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public TradeTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets StopTime
        /// </summary>
        [DataMember(Name="stopTime", EmitDefaultValue=false)]
        public TradeTime StopTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChartCustomSession {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StopTime: ").Append(StopTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChartCustomSession);
        }

        /// <summary>
        /// Returns true if ChartCustomSession instances are equal
        /// </summary>
        /// <param name="input">Instance of ChartCustomSession to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartCustomSession input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.StopTime == input.StopTime ||
                    (this.StopTime != null &&
                    this.StopTime.Equals(input.StopTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.StopTime != null)
                    hashCode = hashCode * 59 + this.StopTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
