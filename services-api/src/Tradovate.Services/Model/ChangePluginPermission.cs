/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// ChangePluginPermission
    /// </summary>
    [DataContract]
        public partial class ChangePluginPermission :  IEquatable<ChangePluginPermission>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePluginPermission" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="pluginName">pluginName (required).</param>
        /// <param name="approval">approval (required).</param>
        public ChangePluginPermission(long? userId = default(long?), string pluginName = default(string), bool? approval = default(bool?))
        {
            // to ensure "pluginName" is required (not null)
            if (pluginName == null)
            {
                throw new InvalidDataException("pluginName is a required property for ChangePluginPermission and cannot be null");
            }
            else
            {
                this.PluginName = pluginName;
            }
            // to ensure "approval" is required (not null)
            if (approval == null)
            {
                throw new InvalidDataException("approval is a required property for ChangePluginPermission and cannot be null");
            }
            else
            {
                this.Approval = approval;
            }
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets PluginName
        /// </summary>
        [DataMember(Name="pluginName", EmitDefaultValue=false)]
        public string PluginName { get; set; }

        /// <summary>
        /// Gets or Sets Approval
        /// </summary>
        [DataMember(Name="approval", EmitDefaultValue=false)]
        public bool? Approval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangePluginPermission {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PluginName: ").Append(PluginName).Append("\n");
            sb.Append("  Approval: ").Append(Approval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangePluginPermission);
        }

        /// <summary>
        /// Returns true if ChangePluginPermission instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangePluginPermission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangePluginPermission input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.PluginName == input.PluginName ||
                    (this.PluginName != null &&
                    this.PluginName.Equals(input.PluginName))
                ) && 
                (
                    this.Approval == input.Approval ||
                    (this.Approval != null &&
                    this.Approval.Equals(input.Approval))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.PluginName != null)
                    hashCode = hashCode * 59 + this.PluginName.GetHashCode();
                if (this.Approval != null)
                    hashCode = hashCode * 59 + this.Approval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
