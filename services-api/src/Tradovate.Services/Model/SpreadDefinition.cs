/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// SpreadDefinition
    /// </summary>
    [DataContract]
        public partial class SpreadDefinition :  IEquatable<SpreadDefinition>, IValidatableObject
    {
        /// <summary>
        /// Bundle, BundleSpread, Butterfly, CalendarSpread, Condor, Crack, DoubleButterfly, General, IntercommoditySpread, LaggedIntercommoditySpread, Pack, PackButterfly, PackSpread, ReducedTickCalendarSpread, ReverseIntercommoditySpread, ReverseSpread, Strip, TreasuryIntercommoditySpread
        /// </summary>
        /// <value>Bundle, BundleSpread, Butterfly, CalendarSpread, Condor, Crack, DoubleButterfly, General, IntercommoditySpread, LaggedIntercommoditySpread, Pack, PackButterfly, PackSpread, ReducedTickCalendarSpread, ReverseIntercommoditySpread, ReverseSpread, Strip, TreasuryIntercommoditySpread</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SpreadTypeEnum
        {
            /// <summary>
            /// Enum Bundle for value: Bundle
            /// </summary>
            [EnumMember(Value = "Bundle")]
            Bundle = 1,
            /// <summary>
            /// Enum BundleSpread for value: BundleSpread
            /// </summary>
            [EnumMember(Value = "BundleSpread")]
            BundleSpread = 2,
            /// <summary>
            /// Enum Butterfly for value: Butterfly
            /// </summary>
            [EnumMember(Value = "Butterfly")]
            Butterfly = 3,
            /// <summary>
            /// Enum CalendarSpread for value: CalendarSpread
            /// </summary>
            [EnumMember(Value = "CalendarSpread")]
            CalendarSpread = 4,
            /// <summary>
            /// Enum Condor for value: Condor
            /// </summary>
            [EnumMember(Value = "Condor")]
            Condor = 5,
            /// <summary>
            /// Enum Crack for value: Crack
            /// </summary>
            [EnumMember(Value = "Crack")]
            Crack = 6,
            /// <summary>
            /// Enum DoubleButterfly for value: DoubleButterfly
            /// </summary>
            [EnumMember(Value = "DoubleButterfly")]
            DoubleButterfly = 7,
            /// <summary>
            /// Enum General for value: General
            /// </summary>
            [EnumMember(Value = "General")]
            General = 8,
            /// <summary>
            /// Enum IntercommoditySpread for value: IntercommoditySpread
            /// </summary>
            [EnumMember(Value = "IntercommoditySpread")]
            IntercommoditySpread = 9,
            /// <summary>
            /// Enum LaggedIntercommoditySpread for value: LaggedIntercommoditySpread
            /// </summary>
            [EnumMember(Value = "LaggedIntercommoditySpread")]
            LaggedIntercommoditySpread = 10,
            /// <summary>
            /// Enum Pack for value: Pack
            /// </summary>
            [EnumMember(Value = "Pack")]
            Pack = 11,
            /// <summary>
            /// Enum PackButterfly for value: PackButterfly
            /// </summary>
            [EnumMember(Value = "PackButterfly")]
            PackButterfly = 12,
            /// <summary>
            /// Enum PackSpread for value: PackSpread
            /// </summary>
            [EnumMember(Value = "PackSpread")]
            PackSpread = 13,
            /// <summary>
            /// Enum ReducedTickCalendarSpread for value: ReducedTickCalendarSpread
            /// </summary>
            [EnumMember(Value = "ReducedTickCalendarSpread")]
            ReducedTickCalendarSpread = 14,
            /// <summary>
            /// Enum ReverseIntercommoditySpread for value: ReverseIntercommoditySpread
            /// </summary>
            [EnumMember(Value = "ReverseIntercommoditySpread")]
            ReverseIntercommoditySpread = 15,
            /// <summary>
            /// Enum ReverseSpread for value: ReverseSpread
            /// </summary>
            [EnumMember(Value = "ReverseSpread")]
            ReverseSpread = 16,
            /// <summary>
            /// Enum Strip for value: Strip
            /// </summary>
            [EnumMember(Value = "Strip")]
            Strip = 17,
            /// <summary>
            /// Enum TreasuryIntercommoditySpread for value: TreasuryIntercommoditySpread
            /// </summary>
            [EnumMember(Value = "TreasuryIntercommoditySpread")]
            TreasuryIntercommoditySpread = 18        }
        /// <summary>
        /// Bundle, BundleSpread, Butterfly, CalendarSpread, Condor, Crack, DoubleButterfly, General, IntercommoditySpread, LaggedIntercommoditySpread, Pack, PackButterfly, PackSpread, ReducedTickCalendarSpread, ReverseIntercommoditySpread, ReverseSpread, Strip, TreasuryIntercommoditySpread
        /// </summary>
        /// <value>Bundle, BundleSpread, Butterfly, CalendarSpread, Condor, Crack, DoubleButterfly, General, IntercommoditySpread, LaggedIntercommoditySpread, Pack, PackButterfly, PackSpread, ReducedTickCalendarSpread, ReverseIntercommoditySpread, ReverseSpread, Strip, TreasuryIntercommoditySpread</value>
        [DataMember(Name="spreadType", EmitDefaultValue=false)]
        public SpreadTypeEnum SpreadType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpreadDefinition" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="spreadType">Bundle, BundleSpread, Butterfly, CalendarSpread, Condor, Crack, DoubleButterfly, General, IntercommoditySpread, LaggedIntercommoditySpread, Pack, PackButterfly, PackSpread, ReducedTickCalendarSpread, ReverseIntercommoditySpread, ReverseSpread, Strip, TreasuryIntercommoditySpread (required).</param>
        /// <param name="uds">uds (required).</param>
        public SpreadDefinition(long? id = default(long?), DateTime? timestamp = default(DateTime?), SpreadTypeEnum spreadType = default(SpreadTypeEnum), bool? uds = default(bool?))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for SpreadDefinition and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "spreadType" is required (not null)
            if (spreadType == null)
            {
                throw new InvalidDataException("spreadType is a required property for SpreadDefinition and cannot be null");
            }
            else
            {
                this.SpreadType = spreadType;
            }
            // to ensure "uds" is required (not null)
            if (uds == null)
            {
                throw new InvalidDataException("uds is a required property for SpreadDefinition and cannot be null");
            }
            else
            {
                this.Uds = uds;
            }
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }


        /// <summary>
        /// Gets or Sets Uds
        /// </summary>
        [DataMember(Name="uds", EmitDefaultValue=false)]
        public bool? Uds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpreadDefinition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SpreadType: ").Append(SpreadType).Append("\n");
            sb.Append("  Uds: ").Append(Uds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpreadDefinition);
        }

        /// <summary>
        /// Returns true if SpreadDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of SpreadDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpreadDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.SpreadType == input.SpreadType ||
                    (this.SpreadType != null &&
                    this.SpreadType.Equals(input.SpreadType))
                ) && 
                (
                    this.Uds == input.Uds ||
                    (this.Uds != null &&
                    this.Uds.Equals(input.Uds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.SpreadType != null)
                    hashCode = hashCode * 59 + this.SpreadType.GetHashCode();
                if (this.Uds != null)
                    hashCode = hashCode * 59 + this.Uds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
