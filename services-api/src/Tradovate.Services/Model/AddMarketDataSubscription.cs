/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// AddMarketDataSubscription
    /// </summary>
    [DataContract]
        public partial class AddMarketDataSubscription :  IEquatable<AddMarketDataSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMarketDataSubscription" /> class.
        /// </summary>
        /// <param name="marketDataSubscriptionPlanIds">marketDataSubscriptionPlanIds (required).</param>
        /// <param name="year">year (required).</param>
        /// <param name="month">month (required).</param>
        /// <param name="creditCardId">creditCardId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="userId">userId.</param>
        public AddMarketDataSubscription(List<int?> marketDataSubscriptionPlanIds = default(List<int?>), int? year = default(int?), int? month = default(int?), long? creditCardId = default(long?), long? accountId = default(long?), long? userId = default(long?))
        {
            // to ensure "marketDataSubscriptionPlanIds" is required (not null)
            if (marketDataSubscriptionPlanIds == null)
            {
                throw new InvalidDataException("marketDataSubscriptionPlanIds is a required property for AddMarketDataSubscription and cannot be null");
            }
            else
            {
                this.MarketDataSubscriptionPlanIds = marketDataSubscriptionPlanIds;
            }
            // to ensure "year" is required (not null)
            if (year == null)
            {
                throw new InvalidDataException("year is a required property for AddMarketDataSubscription and cannot be null");
            }
            else
            {
                this.Year = year;
            }
            // to ensure "month" is required (not null)
            if (month == null)
            {
                throw new InvalidDataException("month is a required property for AddMarketDataSubscription and cannot be null");
            }
            else
            {
                this.Month = month;
            }
            this.CreditCardId = creditCardId;
            this.AccountId = accountId;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets MarketDataSubscriptionPlanIds
        /// </summary>
        [DataMember(Name="marketDataSubscriptionPlanIds", EmitDefaultValue=false)]
        public List<int?> MarketDataSubscriptionPlanIds { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; set; }

        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public int? Month { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardId
        /// </summary>
        [DataMember(Name="creditCardId", EmitDefaultValue=false)]
        public long? CreditCardId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddMarketDataSubscription {\n");
            sb.Append("  MarketDataSubscriptionPlanIds: ").Append(MarketDataSubscriptionPlanIds).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  CreditCardId: ").Append(CreditCardId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddMarketDataSubscription);
        }

        /// <summary>
        /// Returns true if AddMarketDataSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of AddMarketDataSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddMarketDataSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketDataSubscriptionPlanIds == input.MarketDataSubscriptionPlanIds ||
                    this.MarketDataSubscriptionPlanIds != null &&
                    input.MarketDataSubscriptionPlanIds != null &&
                    this.MarketDataSubscriptionPlanIds.SequenceEqual(input.MarketDataSubscriptionPlanIds)
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this.CreditCardId == input.CreditCardId ||
                    (this.CreditCardId != null &&
                    this.CreditCardId.Equals(input.CreditCardId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketDataSubscriptionPlanIds != null)
                    hashCode = hashCode * 59 + this.MarketDataSubscriptionPlanIds.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Month != null)
                    hashCode = hashCode * 59 + this.Month.GetHashCode();
                if (this.CreditCardId != null)
                    hashCode = hashCode * 59 + this.CreditCardId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
