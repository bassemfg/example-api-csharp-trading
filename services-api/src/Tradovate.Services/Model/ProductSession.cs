/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// ProductSession
    /// </summary>
    [DataContract]
        public partial class ProductSession :  IEquatable<ProductSession>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSession" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="openTime">openTime (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="stopTime">stopTime (required).</param>
        /// <param name="closeTime">closeTime (required).</param>
        /// <param name="sundayOpenTime">sundayOpenTime.</param>
        public ProductSession(long? id = default(long?), TradeTime openTime = default(TradeTime), TradeTime startTime = default(TradeTime), TradeTime stopTime = default(TradeTime), TradeTime closeTime = default(TradeTime), TradeTime sundayOpenTime = default(TradeTime))
        {
            // to ensure "openTime" is required (not null)
            if (openTime == null)
            {
                throw new InvalidDataException("openTime is a required property for ProductSession and cannot be null");
            }
            else
            {
                this.OpenTime = openTime;
            }
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for ProductSession and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }
            // to ensure "stopTime" is required (not null)
            if (stopTime == null)
            {
                throw new InvalidDataException("stopTime is a required property for ProductSession and cannot be null");
            }
            else
            {
                this.StopTime = stopTime;
            }
            // to ensure "closeTime" is required (not null)
            if (closeTime == null)
            {
                throw new InvalidDataException("closeTime is a required property for ProductSession and cannot be null");
            }
            else
            {
                this.CloseTime = closeTime;
            }
            this.Id = id;
            this.SundayOpenTime = sundayOpenTime;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets OpenTime
        /// </summary>
        [DataMember(Name="openTime", EmitDefaultValue=false)]
        public TradeTime OpenTime { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public TradeTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets StopTime
        /// </summary>
        [DataMember(Name="stopTime", EmitDefaultValue=false)]
        public TradeTime StopTime { get; set; }

        /// <summary>
        /// Gets or Sets CloseTime
        /// </summary>
        [DataMember(Name="closeTime", EmitDefaultValue=false)]
        public TradeTime CloseTime { get; set; }

        /// <summary>
        /// Gets or Sets SundayOpenTime
        /// </summary>
        [DataMember(Name="sundayOpenTime", EmitDefaultValue=false)]
        public TradeTime SundayOpenTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductSession {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OpenTime: ").Append(OpenTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StopTime: ").Append(StopTime).Append("\n");
            sb.Append("  CloseTime: ").Append(CloseTime).Append("\n");
            sb.Append("  SundayOpenTime: ").Append(SundayOpenTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductSession);
        }

        /// <summary>
        /// Returns true if ProductSession instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductSession to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductSession input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OpenTime == input.OpenTime ||
                    (this.OpenTime != null &&
                    this.OpenTime.Equals(input.OpenTime))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.StopTime == input.StopTime ||
                    (this.StopTime != null &&
                    this.StopTime.Equals(input.StopTime))
                ) && 
                (
                    this.CloseTime == input.CloseTime ||
                    (this.CloseTime != null &&
                    this.CloseTime.Equals(input.CloseTime))
                ) && 
                (
                    this.SundayOpenTime == input.SundayOpenTime ||
                    (this.SundayOpenTime != null &&
                    this.SundayOpenTime.Equals(input.SundayOpenTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OpenTime != null)
                    hashCode = hashCode * 59 + this.OpenTime.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.StopTime != null)
                    hashCode = hashCode * 59 + this.StopTime.GetHashCode();
                if (this.CloseTime != null)
                    hashCode = hashCode * 59 + this.CloseTime.GetHashCode();
                if (this.SundayOpenTime != null)
                    hashCode = hashCode * 59 + this.SundayOpenTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
