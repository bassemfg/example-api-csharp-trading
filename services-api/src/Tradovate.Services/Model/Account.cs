/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract]
        public partial class Account :  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// Customer, Giveup, House, Omnibus, Wash
        /// </summary>
        /// <value>Customer, Giveup, House, Omnibus, Wash</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum Customer for value: Customer
            /// </summary>
            [EnumMember(Value = "Customer")]
            Customer = 1,
            /// <summary>
            /// Enum Giveup for value: Giveup
            /// </summary>
            [EnumMember(Value = "Giveup")]
            Giveup = 2,
            /// <summary>
            /// Enum House for value: House
            /// </summary>
            [EnumMember(Value = "House")]
            House = 3,
            /// <summary>
            /// Enum Omnibus for value: Omnibus
            /// </summary>
            [EnumMember(Value = "Omnibus")]
            Omnibus = 4,
            /// <summary>
            /// Enum Wash for value: Wash
            /// </summary>
            [EnumMember(Value = "Wash")]
            Wash = 5        }
        /// <summary>
        /// Customer, Giveup, House, Omnibus, Wash
        /// </summary>
        /// <value>Customer, Giveup, House, Omnibus, Wash</value>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public AccountTypeEnum AccountType { get; set; }
        /// <summary>
        /// Hedger, Speculator
        /// </summary>
        /// <value>Hedger, Speculator</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MarginAccountTypeEnum
        {
            /// <summary>
            /// Enum Hedger for value: Hedger
            /// </summary>
            [EnumMember(Value = "Hedger")]
            Hedger = 1,
            /// <summary>
            /// Enum Speculator for value: Speculator
            /// </summary>
            [EnumMember(Value = "Speculator")]
            Speculator = 2        }
        /// <summary>
        /// Hedger, Speculator
        /// </summary>
        /// <value>Hedger, Speculator</value>
        [DataMember(Name="marginAccountType", EmitDefaultValue=false)]
        public MarginAccountTypeEnum MarginAccountType { get; set; }
        /// <summary>
        /// Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust
        /// </summary>
        /// <value>Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LegalStatusEnum
        {
            /// <summary>
            /// Enum Corporation for value: Corporation
            /// </summary>
            [EnumMember(Value = "Corporation")]
            Corporation = 1,
            /// <summary>
            /// Enum GP for value: GP
            /// </summary>
            [EnumMember(Value = "GP")]
            GP = 2,
            /// <summary>
            /// Enum IRA for value: IRA
            /// </summary>
            [EnumMember(Value = "IRA")]
            IRA = 3,
            /// <summary>
            /// Enum Individual for value: Individual
            /// </summary>
            [EnumMember(Value = "Individual")]
            Individual = 4,
            /// <summary>
            /// Enum Joint for value: Joint
            /// </summary>
            [EnumMember(Value = "Joint")]
            Joint = 5,
            /// <summary>
            /// Enum LLC for value: LLC
            /// </summary>
            [EnumMember(Value = "LLC")]
            LLC = 6,
            /// <summary>
            /// Enum LLP for value: LLP
            /// </summary>
            [EnumMember(Value = "LLP")]
            LLP = 7,
            /// <summary>
            /// Enum LP for value: LP
            /// </summary>
            [EnumMember(Value = "LP")]
            LP = 8,
            /// <summary>
            /// Enum Trust for value: Trust
            /// </summary>
            [EnumMember(Value = "Trust")]
            Trust = 9        }
        /// <summary>
        /// Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust
        /// </summary>
        /// <value>Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust</value>
        [DataMember(Name="legalStatus", EmitDefaultValue=false)]
        public LegalStatusEnum LegalStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="accountType">Customer, Giveup, House, Omnibus, Wash (required).</param>
        /// <param name="active">active (required).</param>
        /// <param name="clearingHouseId">clearingHouseId (required).</param>
        /// <param name="riskCategoryId">riskCategoryId (required).</param>
        /// <param name="autoLiqProfileId">autoLiqProfileId (required).</param>
        /// <param name="marginAccountType">Hedger, Speculator (required).</param>
        /// <param name="legalStatus">Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, Trust (required).</param>
        /// <param name="@readonly">@readonly.</param>
        public Account(long? id = default(long?), string name = default(string), long? userId = default(long?), AccountTypeEnum accountType = default(AccountTypeEnum), bool? active = default(bool?), long? clearingHouseId = default(long?), long? riskCategoryId = default(long?), long? autoLiqProfileId = default(long?), MarginAccountTypeEnum marginAccountType = default(MarginAccountTypeEnum), LegalStatusEnum legalStatus = default(LegalStatusEnum), bool? @readonly = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Account and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for Account and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "accountType" is required (not null)
            if (accountType == null)
            {
                throw new InvalidDataException("accountType is a required property for Account and cannot be null");
            }
            else
            {
                this.AccountType = accountType;
            }
            // to ensure "active" is required (not null)
            if (active == null)
            {
                throw new InvalidDataException("active is a required property for Account and cannot be null");
            }
            else
            {
                this.Active = active;
            }
            // to ensure "clearingHouseId" is required (not null)
            if (clearingHouseId == null)
            {
                throw new InvalidDataException("clearingHouseId is a required property for Account and cannot be null");
            }
            else
            {
                this.ClearingHouseId = clearingHouseId;
            }
            // to ensure "riskCategoryId" is required (not null)
            if (riskCategoryId == null)
            {
                throw new InvalidDataException("riskCategoryId is a required property for Account and cannot be null");
            }
            else
            {
                this.RiskCategoryId = riskCategoryId;
            }
            // to ensure "autoLiqProfileId" is required (not null)
            if (autoLiqProfileId == null)
            {
                throw new InvalidDataException("autoLiqProfileId is a required property for Account and cannot be null");
            }
            else
            {
                this.AutoLiqProfileId = autoLiqProfileId;
            }
            // to ensure "marginAccountType" is required (not null)
            if (marginAccountType == null)
            {
                throw new InvalidDataException("marginAccountType is a required property for Account and cannot be null");
            }
            else
            {
                this.MarginAccountType = marginAccountType;
            }
            // to ensure "legalStatus" is required (not null)
            if (legalStatus == null)
            {
                throw new InvalidDataException("legalStatus is a required property for Account and cannot be null");
            }
            else
            {
                this.LegalStatus = legalStatus;
            }
            this.Id = id;
            this.Readonly = @readonly;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }


        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets ClearingHouseId
        /// </summary>
        [DataMember(Name="clearingHouseId", EmitDefaultValue=false)]
        public long? ClearingHouseId { get; set; }

        /// <summary>
        /// Gets or Sets RiskCategoryId
        /// </summary>
        [DataMember(Name="riskCategoryId", EmitDefaultValue=false)]
        public long? RiskCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets AutoLiqProfileId
        /// </summary>
        [DataMember(Name="autoLiqProfileId", EmitDefaultValue=false)]
        public long? AutoLiqProfileId { get; set; }



        /// <summary>
        /// Gets or Sets Readonly
        /// </summary>
        [DataMember(Name="readonly", EmitDefaultValue=false)]
        public bool? Readonly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ClearingHouseId: ").Append(ClearingHouseId).Append("\n");
            sb.Append("  RiskCategoryId: ").Append(RiskCategoryId).Append("\n");
            sb.Append("  AutoLiqProfileId: ").Append(AutoLiqProfileId).Append("\n");
            sb.Append("  MarginAccountType: ").Append(MarginAccountType).Append("\n");
            sb.Append("  LegalStatus: ").Append(LegalStatus).Append("\n");
            sb.Append("  Readonly: ").Append(Readonly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.ClearingHouseId == input.ClearingHouseId ||
                    (this.ClearingHouseId != null &&
                    this.ClearingHouseId.Equals(input.ClearingHouseId))
                ) && 
                (
                    this.RiskCategoryId == input.RiskCategoryId ||
                    (this.RiskCategoryId != null &&
                    this.RiskCategoryId.Equals(input.RiskCategoryId))
                ) && 
                (
                    this.AutoLiqProfileId == input.AutoLiqProfileId ||
                    (this.AutoLiqProfileId != null &&
                    this.AutoLiqProfileId.Equals(input.AutoLiqProfileId))
                ) && 
                (
                    this.MarginAccountType == input.MarginAccountType ||
                    (this.MarginAccountType != null &&
                    this.MarginAccountType.Equals(input.MarginAccountType))
                ) && 
                (
                    this.LegalStatus == input.LegalStatus ||
                    (this.LegalStatus != null &&
                    this.LegalStatus.Equals(input.LegalStatus))
                ) && 
                (
                    this.Readonly == input.Readonly ||
                    (this.Readonly != null &&
                    this.Readonly.Equals(input.Readonly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.ClearingHouseId != null)
                    hashCode = hashCode * 59 + this.ClearingHouseId.GetHashCode();
                if (this.RiskCategoryId != null)
                    hashCode = hashCode * 59 + this.RiskCategoryId.GetHashCode();
                if (this.AutoLiqProfileId != null)
                    hashCode = hashCode * 59 + this.AutoLiqProfileId.GetHashCode();
                if (this.MarginAccountType != null)
                    hashCode = hashCode * 59 + this.MarginAccountType.GetHashCode();
                if (this.LegalStatus != null)
                    hashCode = hashCode * 59 + this.LegalStatus.GetHashCode();
                if (this.Readonly != null)
                    hashCode = hashCode * 59 + this.Readonly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
