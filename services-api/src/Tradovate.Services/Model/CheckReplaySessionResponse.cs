/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// CheckReplaySessionResponse
    /// </summary>
    [DataContract]
        public partial class CheckReplaySessionResponse :  IEquatable<CheckReplaySessionResponse>, IValidatableObject
    {
        /// <summary>
        /// Ineligible, OK, StartTimestampAdjusted
        /// </summary>
        /// <value>Ineligible, OK, StartTimestampAdjusted</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CheckStatusEnum
        {
            /// <summary>
            /// Enum Ineligible for value: Ineligible
            /// </summary>
            [EnumMember(Value = "Ineligible")]
            Ineligible = 1,
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 2,
            /// <summary>
            /// Enum StartTimestampAdjusted for value: StartTimestampAdjusted
            /// </summary>
            [EnumMember(Value = "StartTimestampAdjusted")]
            StartTimestampAdjusted = 3        }
        /// <summary>
        /// Ineligible, OK, StartTimestampAdjusted
        /// </summary>
        /// <value>Ineligible, OK, StartTimestampAdjusted</value>
        [DataMember(Name="checkStatus", EmitDefaultValue=false)]
        public CheckStatusEnum CheckStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckReplaySessionResponse" /> class.
        /// </summary>
        /// <param name="checkStatus">Ineligible, OK, StartTimestampAdjusted (required).</param>
        /// <param name="startTimestamp">startTimestamp.</param>
        public CheckReplaySessionResponse(CheckStatusEnum checkStatus = default(CheckStatusEnum), DateTime? startTimestamp = default(DateTime?))
        {
            // to ensure "checkStatus" is required (not null)
            if (checkStatus == null)
            {
                throw new InvalidDataException("checkStatus is a required property for CheckReplaySessionResponse and cannot be null");
            }
            else
            {
                this.CheckStatus = checkStatus;
            }
            this.StartTimestamp = startTimestamp;
        }
        

        /// <summary>
        /// Gets or Sets StartTimestamp
        /// </summary>
        [DataMember(Name="startTimestamp", EmitDefaultValue=false)]
        public DateTime? StartTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckReplaySessionResponse {\n");
            sb.Append("  CheckStatus: ").Append(CheckStatus).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckReplaySessionResponse);
        }

        /// <summary>
        /// Returns true if CheckReplaySessionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckReplaySessionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckReplaySessionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CheckStatus == input.CheckStatus ||
                    (this.CheckStatus != null &&
                    this.CheckStatus.Equals(input.CheckStatus))
                ) && 
                (
                    this.StartTimestamp == input.StartTimestamp ||
                    (this.StartTimestamp != null &&
                    this.StartTimestamp.Equals(input.StartTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckStatus != null)
                    hashCode = hashCode * 59 + this.CheckStatus.GetHashCode();
                if (this.StartTimestamp != null)
                    hashCode = hashCode * 59 + this.StartTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
