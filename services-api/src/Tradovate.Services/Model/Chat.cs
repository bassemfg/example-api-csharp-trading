/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// Chat
    /// </summary>
    [DataContract]
        public partial class Chat :  IEquatable<Chat>, IValidatableObject
    {
        /// <summary>
        /// Support, TradeDesk
        /// </summary>
        /// <value>Support, TradeDesk</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CategoryEnum
        {
            /// <summary>
            /// Enum Support for value: Support
            /// </summary>
            [EnumMember(Value = "Support")]
            Support = 1,
            /// <summary>
            /// Enum TradeDesk for value: TradeDesk
            /// </summary>
            [EnumMember(Value = "TradeDesk")]
            TradeDesk = 2        }
        /// <summary>
        /// Support, TradeDesk
        /// </summary>
        /// <value>Support, TradeDesk</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Chat" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="category">Support, TradeDesk (required).</param>
        /// <param name="assignedSupportId">Assigned To.</param>
        /// <param name="closedById">Closed By.</param>
        /// <param name="closeTimestamp">closeTimestamp.</param>
        public Chat(long? id = default(long?), long? userId = default(long?), DateTime? timestamp = default(DateTime?), CategoryEnum category = default(CategoryEnum), long? assignedSupportId = default(long?), long? closedById = default(long?), DateTime? closeTimestamp = default(DateTime?))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for Chat and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for Chat and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new InvalidDataException("category is a required property for Chat and cannot be null");
            }
            else
            {
                this.Category = category;
            }
            this.Id = id;
            this.AssignedSupportId = assignedSupportId;
            this.ClosedById = closedById;
            this.CloseTimestamp = closeTimestamp;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }


        /// <summary>
        /// Assigned To
        /// </summary>
        /// <value>Assigned To</value>
        [DataMember(Name="assignedSupportId", EmitDefaultValue=false)]
        public long? AssignedSupportId { get; set; }

        /// <summary>
        /// Closed By
        /// </summary>
        /// <value>Closed By</value>
        [DataMember(Name="closedById", EmitDefaultValue=false)]
        public long? ClosedById { get; set; }

        /// <summary>
        /// Gets or Sets CloseTimestamp
        /// </summary>
        [DataMember(Name="closeTimestamp", EmitDefaultValue=false)]
        public DateTime? CloseTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Chat {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  AssignedSupportId: ").Append(AssignedSupportId).Append("\n");
            sb.Append("  ClosedById: ").Append(ClosedById).Append("\n");
            sb.Append("  CloseTimestamp: ").Append(CloseTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Chat);
        }

        /// <summary>
        /// Returns true if Chat instances are equal
        /// </summary>
        /// <param name="input">Instance of Chat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Chat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.AssignedSupportId == input.AssignedSupportId ||
                    (this.AssignedSupportId != null &&
                    this.AssignedSupportId.Equals(input.AssignedSupportId))
                ) && 
                (
                    this.ClosedById == input.ClosedById ||
                    (this.ClosedById != null &&
                    this.ClosedById.Equals(input.ClosedById))
                ) && 
                (
                    this.CloseTimestamp == input.CloseTimestamp ||
                    (this.CloseTimestamp != null &&
                    this.CloseTimestamp.Equals(input.CloseTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.AssignedSupportId != null)
                    hashCode = hashCode * 59 + this.AssignedSupportId.GetHashCode();
                if (this.ClosedById != null)
                    hashCode = hashCode * 59 + this.ClosedById.GetHashCode();
                if (this.CloseTimestamp != null)
                    hashCode = hashCode * 59 + this.CloseTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
