/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// FillPair
    /// </summary>
    [DataContract]
        public partial class FillPair :  IEquatable<FillPair>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FillPair" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="positionId">positionId (required).</param>
        /// <param name="buyFillId">buyFillId (required).</param>
        /// <param name="sellFillId">sellFillId (required).</param>
        /// <param name="qty">qty (required).</param>
        /// <param name="buyPrice">buyPrice (required).</param>
        /// <param name="sellPrice">sellPrice (required).</param>
        /// <param name="active">active (required).</param>
        public FillPair(long? id = default(long?), long? positionId = default(long?), long? buyFillId = default(long?), long? sellFillId = default(long?), int? qty = default(int?), double? buyPrice = default(double?), double? sellPrice = default(double?), bool? active = default(bool?))
        {
            // to ensure "positionId" is required (not null)
            if (positionId == null)
            {
                throw new InvalidDataException("positionId is a required property for FillPair and cannot be null");
            }
            else
            {
                this.PositionId = positionId;
            }
            // to ensure "buyFillId" is required (not null)
            if (buyFillId == null)
            {
                throw new InvalidDataException("buyFillId is a required property for FillPair and cannot be null");
            }
            else
            {
                this.BuyFillId = buyFillId;
            }
            // to ensure "sellFillId" is required (not null)
            if (sellFillId == null)
            {
                throw new InvalidDataException("sellFillId is a required property for FillPair and cannot be null");
            }
            else
            {
                this.SellFillId = sellFillId;
            }
            // to ensure "qty" is required (not null)
            if (qty == null)
            {
                throw new InvalidDataException("qty is a required property for FillPair and cannot be null");
            }
            else
            {
                this.Qty = qty;
            }
            // to ensure "buyPrice" is required (not null)
            if (buyPrice == null)
            {
                throw new InvalidDataException("buyPrice is a required property for FillPair and cannot be null");
            }
            else
            {
                this.BuyPrice = buyPrice;
            }
            // to ensure "sellPrice" is required (not null)
            if (sellPrice == null)
            {
                throw new InvalidDataException("sellPrice is a required property for FillPair and cannot be null");
            }
            else
            {
                this.SellPrice = sellPrice;
            }
            // to ensure "active" is required (not null)
            if (active == null)
            {
                throw new InvalidDataException("active is a required property for FillPair and cannot be null");
            }
            else
            {
                this.Active = active;
            }
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets PositionId
        /// </summary>
        [DataMember(Name="positionId", EmitDefaultValue=false)]
        public long? PositionId { get; set; }

        /// <summary>
        /// Gets or Sets BuyFillId
        /// </summary>
        [DataMember(Name="buyFillId", EmitDefaultValue=false)]
        public long? BuyFillId { get; set; }

        /// <summary>
        /// Gets or Sets SellFillId
        /// </summary>
        [DataMember(Name="sellFillId", EmitDefaultValue=false)]
        public long? SellFillId { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="qty", EmitDefaultValue=false)]
        public int? Qty { get; set; }

        /// <summary>
        /// Gets or Sets BuyPrice
        /// </summary>
        [DataMember(Name="buyPrice", EmitDefaultValue=false)]
        public double? BuyPrice { get; set; }

        /// <summary>
        /// Gets or Sets SellPrice
        /// </summary>
        [DataMember(Name="sellPrice", EmitDefaultValue=false)]
        public double? SellPrice { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FillPair {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PositionId: ").Append(PositionId).Append("\n");
            sb.Append("  BuyFillId: ").Append(BuyFillId).Append("\n");
            sb.Append("  SellFillId: ").Append(SellFillId).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  BuyPrice: ").Append(BuyPrice).Append("\n");
            sb.Append("  SellPrice: ").Append(SellPrice).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FillPair);
        }

        /// <summary>
        /// Returns true if FillPair instances are equal
        /// </summary>
        /// <param name="input">Instance of FillPair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FillPair input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PositionId == input.PositionId ||
                    (this.PositionId != null &&
                    this.PositionId.Equals(input.PositionId))
                ) && 
                (
                    this.BuyFillId == input.BuyFillId ||
                    (this.BuyFillId != null &&
                    this.BuyFillId.Equals(input.BuyFillId))
                ) && 
                (
                    this.SellFillId == input.SellFillId ||
                    (this.SellFillId != null &&
                    this.SellFillId.Equals(input.SellFillId))
                ) && 
                (
                    this.Qty == input.Qty ||
                    (this.Qty != null &&
                    this.Qty.Equals(input.Qty))
                ) && 
                (
                    this.BuyPrice == input.BuyPrice ||
                    (this.BuyPrice != null &&
                    this.BuyPrice.Equals(input.BuyPrice))
                ) && 
                (
                    this.SellPrice == input.SellPrice ||
                    (this.SellPrice != null &&
                    this.SellPrice.Equals(input.SellPrice))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PositionId != null)
                    hashCode = hashCode * 59 + this.PositionId.GetHashCode();
                if (this.BuyFillId != null)
                    hashCode = hashCode * 59 + this.BuyFillId.GetHashCode();
                if (this.SellFillId != null)
                    hashCode = hashCode * 59 + this.SellFillId.GetHashCode();
                if (this.Qty != null)
                    hashCode = hashCode * 59 + this.Qty.GetHashCode();
                if (this.BuyPrice != null)
                    hashCode = hashCode * 59 + this.BuyPrice.GetHashCode();
                if (this.SellPrice != null)
                    hashCode = hashCode * 59 + this.SellPrice.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
