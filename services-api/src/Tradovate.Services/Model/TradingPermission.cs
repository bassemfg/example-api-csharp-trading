/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// TradingPermission
    /// </summary>
    [DataContract]
        public partial class TradingPermission :  IEquatable<TradingPermission>, IValidatableObject
    {
        /// <summary>
        /// Accepted, Approved, Declined, Requested, Revoked
        /// </summary>
        /// <value>Accepted, Approved, Declined, Requested, Revoked</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 1,
            /// <summary>
            /// Enum Approved for value: Approved
            /// </summary>
            [EnumMember(Value = "Approved")]
            Approved = 2,
            /// <summary>
            /// Enum Declined for value: Declined
            /// </summary>
            [EnumMember(Value = "Declined")]
            Declined = 3,
            /// <summary>
            /// Enum Requested for value: Requested
            /// </summary>
            [EnumMember(Value = "Requested")]
            Requested = 4,
            /// <summary>
            /// Enum Revoked for value: Revoked
            /// </summary>
            [EnumMember(Value = "Revoked")]
            Revoked = 5        }
        /// <summary>
        /// Accepted, Approved, Declined, Requested, Revoked
        /// </summary>
        /// <value>Accepted, Approved, Declined, Requested, Revoked</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingPermission" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="accountHolderContact">accountHolderContact (required).</param>
        /// <param name="accountHolderEmail">accountHolderEmail (required).</param>
        /// <param name="ctaContact">ctaContact (required).</param>
        /// <param name="ctaEmail">ctaEmail (required).</param>
        /// <param name="status">Accepted, Approved, Declined, Requested, Revoked (required).</param>
        /// <param name="updated">updated.</param>
        /// <param name="approvedById">approvedById.</param>
        public TradingPermission(long? id = default(long?), long? userId = default(long?), long? accountId = default(long?), string accountHolderContact = default(string), string accountHolderEmail = default(string), string ctaContact = default(string), string ctaEmail = default(string), StatusEnum status = default(StatusEnum), DateTime? updated = default(DateTime?), long? approvedById = default(long?))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            // to ensure "accountHolderContact" is required (not null)
            if (accountHolderContact == null)
            {
                throw new InvalidDataException("accountHolderContact is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.AccountHolderContact = accountHolderContact;
            }
            // to ensure "accountHolderEmail" is required (not null)
            if (accountHolderEmail == null)
            {
                throw new InvalidDataException("accountHolderEmail is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.AccountHolderEmail = accountHolderEmail;
            }
            // to ensure "ctaContact" is required (not null)
            if (ctaContact == null)
            {
                throw new InvalidDataException("ctaContact is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.CtaContact = ctaContact;
            }
            // to ensure "ctaEmail" is required (not null)
            if (ctaEmail == null)
            {
                throw new InvalidDataException("ctaEmail is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.CtaEmail = ctaEmail;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for TradingPermission and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.Id = id;
            this.Updated = updated;
            this.ApprovedById = approvedById;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccountHolderContact
        /// </summary>
        [DataMember(Name="accountHolderContact", EmitDefaultValue=false)]
        public string AccountHolderContact { get; set; }

        /// <summary>
        /// Gets or Sets AccountHolderEmail
        /// </summary>
        [DataMember(Name="accountHolderEmail", EmitDefaultValue=false)]
        public string AccountHolderEmail { get; set; }

        /// <summary>
        /// Gets or Sets CtaContact
        /// </summary>
        [DataMember(Name="ctaContact", EmitDefaultValue=false)]
        public string CtaContact { get; set; }

        /// <summary>
        /// Gets or Sets CtaEmail
        /// </summary>
        [DataMember(Name="ctaEmail", EmitDefaultValue=false)]
        public string CtaEmail { get; set; }


        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedById
        /// </summary>
        [DataMember(Name="approvedById", EmitDefaultValue=false)]
        public long? ApprovedById { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradingPermission {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountHolderContact: ").Append(AccountHolderContact).Append("\n");
            sb.Append("  AccountHolderEmail: ").Append(AccountHolderEmail).Append("\n");
            sb.Append("  CtaContact: ").Append(CtaContact).Append("\n");
            sb.Append("  CtaEmail: ").Append(CtaEmail).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  ApprovedById: ").Append(ApprovedById).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradingPermission);
        }

        /// <summary>
        /// Returns true if TradingPermission instances are equal
        /// </summary>
        /// <param name="input">Instance of TradingPermission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradingPermission input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountHolderContact == input.AccountHolderContact ||
                    (this.AccountHolderContact != null &&
                    this.AccountHolderContact.Equals(input.AccountHolderContact))
                ) && 
                (
                    this.AccountHolderEmail == input.AccountHolderEmail ||
                    (this.AccountHolderEmail != null &&
                    this.AccountHolderEmail.Equals(input.AccountHolderEmail))
                ) && 
                (
                    this.CtaContact == input.CtaContact ||
                    (this.CtaContact != null &&
                    this.CtaContact.Equals(input.CtaContact))
                ) && 
                (
                    this.CtaEmail == input.CtaEmail ||
                    (this.CtaEmail != null &&
                    this.CtaEmail.Equals(input.CtaEmail))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.ApprovedById == input.ApprovedById ||
                    (this.ApprovedById != null &&
                    this.ApprovedById.Equals(input.ApprovedById))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountHolderContact != null)
                    hashCode = hashCode * 59 + this.AccountHolderContact.GetHashCode();
                if (this.AccountHolderEmail != null)
                    hashCode = hashCode * 59 + this.AccountHolderEmail.GetHashCode();
                if (this.CtaContact != null)
                    hashCode = hashCode * 59 + this.CtaContact.GetHashCode();
                if (this.CtaEmail != null)
                    hashCode = hashCode * 59 + this.CtaEmail.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.ApprovedById != null)
                    hashCode = hashCode * 59 + this.ApprovedById.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
