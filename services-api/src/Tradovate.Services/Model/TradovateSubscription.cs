/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// TradovateSubscription
    /// </summary>
    [DataContract]
        public partial class TradovateSubscription :  IEquatable<TradovateSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradovateSubscription" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="planPrice">planPrice (required).</param>
        /// <param name="creditCardTransactionId">creditCardTransactionId.</param>
        /// <param name="cashBalanceLogId">cashBalanceLogId.</param>
        /// <param name="creditCardId">creditCardId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="tradovateSubscriptionPlanId">tradovateSubscriptionPlanId (required).</param>
        /// <param name="startDate">startDate (required).</param>
        /// <param name="expirationDate">expirationDate (required).</param>
        /// <param name="paidAmount">paidAmount (required).</param>
        /// <param name="cancelledRenewal">cancelledRenewal.</param>
        /// <param name="cancelReason">cancelReason.</param>
        public TradovateSubscription(long? id = default(long?), long? userId = default(long?), DateTime? timestamp = default(DateTime?), double? planPrice = default(double?), long? creditCardTransactionId = default(long?), long? cashBalanceLogId = default(long?), long? creditCardId = default(long?), long? accountId = default(long?), long? tradovateSubscriptionPlanId = default(long?), TradeDate startDate = default(TradeDate), TradeDate expirationDate = default(TradeDate), double? paidAmount = default(double?), bool? cancelledRenewal = default(bool?), string cancelReason = default(string))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "planPrice" is required (not null)
            if (planPrice == null)
            {
                throw new InvalidDataException("planPrice is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.PlanPrice = planPrice;
            }
            // to ensure "tradovateSubscriptionPlanId" is required (not null)
            if (tradovateSubscriptionPlanId == null)
            {
                throw new InvalidDataException("tradovateSubscriptionPlanId is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.TradovateSubscriptionPlanId = tradovateSubscriptionPlanId;
            }
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
            // to ensure "expirationDate" is required (not null)
            if (expirationDate == null)
            {
                throw new InvalidDataException("expirationDate is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.ExpirationDate = expirationDate;
            }
            // to ensure "paidAmount" is required (not null)
            if (paidAmount == null)
            {
                throw new InvalidDataException("paidAmount is a required property for TradovateSubscription and cannot be null");
            }
            else
            {
                this.PaidAmount = paidAmount;
            }
            this.Id = id;
            this.CreditCardTransactionId = creditCardTransactionId;
            this.CashBalanceLogId = cashBalanceLogId;
            this.CreditCardId = creditCardId;
            this.AccountId = accountId;
            this.CancelledRenewal = cancelledRenewal;
            this.CancelReason = cancelReason;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets PlanPrice
        /// </summary>
        [DataMember(Name="planPrice", EmitDefaultValue=false)]
        public double? PlanPrice { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardTransactionId
        /// </summary>
        [DataMember(Name="creditCardTransactionId", EmitDefaultValue=false)]
        public long? CreditCardTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets CashBalanceLogId
        /// </summary>
        [DataMember(Name="cashBalanceLogId", EmitDefaultValue=false)]
        public long? CashBalanceLogId { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardId
        /// </summary>
        [DataMember(Name="creditCardId", EmitDefaultValue=false)]
        public long? CreditCardId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets TradovateSubscriptionPlanId
        /// </summary>
        [DataMember(Name="tradovateSubscriptionPlanId", EmitDefaultValue=false)]
        public long? TradovateSubscriptionPlanId { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public TradeDate StartDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public TradeDate ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets PaidAmount
        /// </summary>
        [DataMember(Name="paidAmount", EmitDefaultValue=false)]
        public double? PaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets CancelledRenewal
        /// </summary>
        [DataMember(Name="cancelledRenewal", EmitDefaultValue=false)]
        public bool? CancelledRenewal { get; set; }

        /// <summary>
        /// Gets or Sets CancelReason
        /// </summary>
        [DataMember(Name="cancelReason", EmitDefaultValue=false)]
        public string CancelReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradovateSubscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  PlanPrice: ").Append(PlanPrice).Append("\n");
            sb.Append("  CreditCardTransactionId: ").Append(CreditCardTransactionId).Append("\n");
            sb.Append("  CashBalanceLogId: ").Append(CashBalanceLogId).Append("\n");
            sb.Append("  CreditCardId: ").Append(CreditCardId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  TradovateSubscriptionPlanId: ").Append(TradovateSubscriptionPlanId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  CancelledRenewal: ").Append(CancelledRenewal).Append("\n");
            sb.Append("  CancelReason: ").Append(CancelReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradovateSubscription);
        }

        /// <summary>
        /// Returns true if TradovateSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of TradovateSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradovateSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.PlanPrice == input.PlanPrice ||
                    (this.PlanPrice != null &&
                    this.PlanPrice.Equals(input.PlanPrice))
                ) && 
                (
                    this.CreditCardTransactionId == input.CreditCardTransactionId ||
                    (this.CreditCardTransactionId != null &&
                    this.CreditCardTransactionId.Equals(input.CreditCardTransactionId))
                ) && 
                (
                    this.CashBalanceLogId == input.CashBalanceLogId ||
                    (this.CashBalanceLogId != null &&
                    this.CashBalanceLogId.Equals(input.CashBalanceLogId))
                ) && 
                (
                    this.CreditCardId == input.CreditCardId ||
                    (this.CreditCardId != null &&
                    this.CreditCardId.Equals(input.CreditCardId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.TradovateSubscriptionPlanId == input.TradovateSubscriptionPlanId ||
                    (this.TradovateSubscriptionPlanId != null &&
                    this.TradovateSubscriptionPlanId.Equals(input.TradovateSubscriptionPlanId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.PaidAmount == input.PaidAmount ||
                    (this.PaidAmount != null &&
                    this.PaidAmount.Equals(input.PaidAmount))
                ) && 
                (
                    this.CancelledRenewal == input.CancelledRenewal ||
                    (this.CancelledRenewal != null &&
                    this.CancelledRenewal.Equals(input.CancelledRenewal))
                ) && 
                (
                    this.CancelReason == input.CancelReason ||
                    (this.CancelReason != null &&
                    this.CancelReason.Equals(input.CancelReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.PlanPrice != null)
                    hashCode = hashCode * 59 + this.PlanPrice.GetHashCode();
                if (this.CreditCardTransactionId != null)
                    hashCode = hashCode * 59 + this.CreditCardTransactionId.GetHashCode();
                if (this.CashBalanceLogId != null)
                    hashCode = hashCode * 59 + this.CashBalanceLogId.GetHashCode();
                if (this.CreditCardId != null)
                    hashCode = hashCode * 59 + this.CreditCardId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.TradovateSubscriptionPlanId != null)
                    hashCode = hashCode * 59 + this.TradovateSubscriptionPlanId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.PaidAmount != null)
                    hashCode = hashCode * 59 + this.PaidAmount.GetHashCode();
                if (this.CancelledRenewal != null)
                    hashCode = hashCode * 59 + this.CancelledRenewal.GetHashCode();
                if (this.CancelReason != null)
                    hashCode = hashCode * 59 + this.CancelReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
