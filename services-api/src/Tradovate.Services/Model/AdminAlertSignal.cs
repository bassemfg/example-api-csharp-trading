/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// AdminAlertSignal
    /// </summary>
    [DataContract]
        public partial class AdminAlertSignal :  IEquatable<AdminAlertSignal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAlertSignal" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="adminAlertId">adminAlertId (required).</param>
        /// <param name="relatedToAccountId">relatedToAccountId.</param>
        /// <param name="relatedToUserId">relatedToUserId.</param>
        /// <param name="ownedByAdminId">Owned By....</param>
        /// <param name="completed">completed.</param>
        /// <param name="text">text (required).</param>
        /// <param name="emailSent">emailSent (required).</param>
        /// <param name="subjectId">subjectId (required).</param>
        public AdminAlertSignal(long? id = default(long?), DateTime? timestamp = default(DateTime?), long? adminAlertId = default(long?), long? relatedToAccountId = default(long?), long? relatedToUserId = default(long?), long? ownedByAdminId = default(long?), DateTime? completed = default(DateTime?), string text = default(string), bool? emailSent = default(bool?), long? subjectId = default(long?))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "adminAlertId" is required (not null)
            if (adminAlertId == null)
            {
                throw new InvalidDataException("adminAlertId is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.AdminAlertId = adminAlertId;
            }
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.Text = text;
            }
            // to ensure "emailSent" is required (not null)
            if (emailSent == null)
            {
                throw new InvalidDataException("emailSent is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.EmailSent = emailSent;
            }
            // to ensure "subjectId" is required (not null)
            if (subjectId == null)
            {
                throw new InvalidDataException("subjectId is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.SubjectId = subjectId;
            }
            this.Id = id;
            this.RelatedToAccountId = relatedToAccountId;
            this.RelatedToUserId = relatedToUserId;
            this.OwnedByAdminId = ownedByAdminId;
            this.Completed = completed;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets AdminAlertId
        /// </summary>
        [DataMember(Name="adminAlertId", EmitDefaultValue=false)]
        public long? AdminAlertId { get; set; }

        /// <summary>
        /// Gets or Sets RelatedToAccountId
        /// </summary>
        [DataMember(Name="relatedToAccountId", EmitDefaultValue=false)]
        public long? RelatedToAccountId { get; set; }

        /// <summary>
        /// Gets or Sets RelatedToUserId
        /// </summary>
        [DataMember(Name="relatedToUserId", EmitDefaultValue=false)]
        public long? RelatedToUserId { get; set; }

        /// <summary>
        /// Owned By...
        /// </summary>
        /// <value>Owned By...</value>
        [DataMember(Name="ownedByAdminId", EmitDefaultValue=false)]
        public long? OwnedByAdminId { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public DateTime? Completed { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets EmailSent
        /// </summary>
        [DataMember(Name="emailSent", EmitDefaultValue=false)]
        public bool? EmailSent { get; set; }

        /// <summary>
        /// Gets or Sets SubjectId
        /// </summary>
        [DataMember(Name="subjectId", EmitDefaultValue=false)]
        public long? SubjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminAlertSignal {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AdminAlertId: ").Append(AdminAlertId).Append("\n");
            sb.Append("  RelatedToAccountId: ").Append(RelatedToAccountId).Append("\n");
            sb.Append("  RelatedToUserId: ").Append(RelatedToUserId).Append("\n");
            sb.Append("  OwnedByAdminId: ").Append(OwnedByAdminId).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  EmailSent: ").Append(EmailSent).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdminAlertSignal);
        }

        /// <summary>
        /// Returns true if AdminAlertSignal instances are equal
        /// </summary>
        /// <param name="input">Instance of AdminAlertSignal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminAlertSignal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.AdminAlertId == input.AdminAlertId ||
                    (this.AdminAlertId != null &&
                    this.AdminAlertId.Equals(input.AdminAlertId))
                ) && 
                (
                    this.RelatedToAccountId == input.RelatedToAccountId ||
                    (this.RelatedToAccountId != null &&
                    this.RelatedToAccountId.Equals(input.RelatedToAccountId))
                ) && 
                (
                    this.RelatedToUserId == input.RelatedToUserId ||
                    (this.RelatedToUserId != null &&
                    this.RelatedToUserId.Equals(input.RelatedToUserId))
                ) && 
                (
                    this.OwnedByAdminId == input.OwnedByAdminId ||
                    (this.OwnedByAdminId != null &&
                    this.OwnedByAdminId.Equals(input.OwnedByAdminId))
                ) && 
                (
                    this.Completed == input.Completed ||
                    (this.Completed != null &&
                    this.Completed.Equals(input.Completed))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.EmailSent == input.EmailSent ||
                    (this.EmailSent != null &&
                    this.EmailSent.Equals(input.EmailSent))
                ) && 
                (
                    this.SubjectId == input.SubjectId ||
                    (this.SubjectId != null &&
                    this.SubjectId.Equals(input.SubjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.AdminAlertId != null)
                    hashCode = hashCode * 59 + this.AdminAlertId.GetHashCode();
                if (this.RelatedToAccountId != null)
                    hashCode = hashCode * 59 + this.RelatedToAccountId.GetHashCode();
                if (this.RelatedToUserId != null)
                    hashCode = hashCode * 59 + this.RelatedToUserId.GetHashCode();
                if (this.OwnedByAdminId != null)
                    hashCode = hashCode * 59 + this.OwnedByAdminId.GetHashCode();
                if (this.Completed != null)
                    hashCode = hashCode * 59 + this.Completed.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.EmailSent != null)
                    hashCode = hashCode * 59 + this.EmailSent.GetHashCode();
                if (this.SubjectId != null)
                    hashCode = hashCode * 59 + this.SubjectId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
