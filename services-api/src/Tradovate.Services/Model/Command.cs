/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// Command
    /// </summary>
    [DataContract]
        public partial class Command :  IEquatable<Command>, IValidatableObject
    {
        /// <summary>
        /// Cancel, Modify, New
        /// </summary>
        /// <value>Cancel, Modify, New</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CommandTypeEnum
        {
            /// <summary>
            /// Enum Cancel for value: Cancel
            /// </summary>
            [EnumMember(Value = "Cancel")]
            Cancel = 1,
            /// <summary>
            /// Enum Modify for value: Modify
            /// </summary>
            [EnumMember(Value = "Modify")]
            Modify = 2,
            /// <summary>
            /// Enum New for value: New
            /// </summary>
            [EnumMember(Value = "New")]
            New = 3        }
        /// <summary>
        /// Cancel, Modify, New
        /// </summary>
        /// <value>Cancel, Modify, New</value>
        [DataMember(Name="commandType", EmitDefaultValue=false)]
        public CommandTypeEnum CommandType { get; set; }
        /// <summary>
        /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
        /// </summary>
        /// <value>AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CommandStatusEnum
        {
            /// <summary>
            /// Enum AtExecution for value: AtExecution
            /// </summary>
            [EnumMember(Value = "AtExecution")]
            AtExecution = 1,
            /// <summary>
            /// Enum ExecutionRejected for value: ExecutionRejected
            /// </summary>
            [EnumMember(Value = "ExecutionRejected")]
            ExecutionRejected = 2,
            /// <summary>
            /// Enum ExecutionStopped for value: ExecutionStopped
            /// </summary>
            [EnumMember(Value = "ExecutionStopped")]
            ExecutionStopped = 3,
            /// <summary>
            /// Enum ExecutionSuspended for value: ExecutionSuspended
            /// </summary>
            [EnumMember(Value = "ExecutionSuspended")]
            ExecutionSuspended = 4,
            /// <summary>
            /// Enum OnHold for value: OnHold
            /// </summary>
            [EnumMember(Value = "OnHold")]
            OnHold = 5,
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 6,
            /// <summary>
            /// Enum PendingExecution for value: PendingExecution
            /// </summary>
            [EnumMember(Value = "PendingExecution")]
            PendingExecution = 7,
            /// <summary>
            /// Enum Replaced for value: Replaced
            /// </summary>
            [EnumMember(Value = "Replaced")]
            Replaced = 8,
            /// <summary>
            /// Enum RiskPassed for value: RiskPassed
            /// </summary>
            [EnumMember(Value = "RiskPassed")]
            RiskPassed = 9,
            /// <summary>
            /// Enum RiskRejected for value: RiskRejected
            /// </summary>
            [EnumMember(Value = "RiskRejected")]
            RiskRejected = 10        }
        /// <summary>
        /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
        /// </summary>
        /// <value>AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected</value>
        [DataMember(Name="commandStatus", EmitDefaultValue=false)]
        public CommandStatusEnum CommandStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Command" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="clOrdId">clOrdId.</param>
        /// <param name="commandType">Cancel, Modify, New (required).</param>
        /// <param name="commandStatus">AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected (required).</param>
        /// <param name="senderId">senderId.</param>
        /// <param name="userSessionId">userSessionId.</param>
        /// <param name="activationTime">activationTime.</param>
        /// <param name="customTag50">customTag50.</param>
        /// <param name="isAutomated">isAutomated.</param>
        public Command(long? id = default(long?), long? orderId = default(long?), DateTime? timestamp = default(DateTime?), string clOrdId = default(string), CommandTypeEnum commandType = default(CommandTypeEnum), CommandStatusEnum commandStatus = default(CommandStatusEnum), long? senderId = default(long?), long? userSessionId = default(long?), DateTime? activationTime = default(DateTime?), string customTag50 = default(string), bool? isAutomated = default(bool?))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for Command and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for Command and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "commandType" is required (not null)
            if (commandType == null)
            {
                throw new InvalidDataException("commandType is a required property for Command and cannot be null");
            }
            else
            {
                this.CommandType = commandType;
            }
            // to ensure "commandStatus" is required (not null)
            if (commandStatus == null)
            {
                throw new InvalidDataException("commandStatus is a required property for Command and cannot be null");
            }
            else
            {
                this.CommandStatus = commandStatus;
            }
            this.Id = id;
            this.ClOrdId = clOrdId;
            this.SenderId = senderId;
            this.UserSessionId = userSessionId;
            this.ActivationTime = activationTime;
            this.CustomTag50 = customTag50;
            this.IsAutomated = isAutomated;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public long? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets ClOrdId
        /// </summary>
        [DataMember(Name="clOrdId", EmitDefaultValue=false)]
        public string ClOrdId { get; set; }



        /// <summary>
        /// Gets or Sets SenderId
        /// </summary>
        [DataMember(Name="senderId", EmitDefaultValue=false)]
        public long? SenderId { get; set; }

        /// <summary>
        /// Gets or Sets UserSessionId
        /// </summary>
        [DataMember(Name="userSessionId", EmitDefaultValue=false)]
        public long? UserSessionId { get; set; }

        /// <summary>
        /// Gets or Sets ActivationTime
        /// </summary>
        [DataMember(Name="activationTime", EmitDefaultValue=false)]
        public DateTime? ActivationTime { get; set; }

        /// <summary>
        /// Gets or Sets CustomTag50
        /// </summary>
        [DataMember(Name="customTag50", EmitDefaultValue=false)]
        public string CustomTag50 { get; set; }

        /// <summary>
        /// Gets or Sets IsAutomated
        /// </summary>
        [DataMember(Name="isAutomated", EmitDefaultValue=false)]
        public bool? IsAutomated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Command {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ClOrdId: ").Append(ClOrdId).Append("\n");
            sb.Append("  CommandType: ").Append(CommandType).Append("\n");
            sb.Append("  CommandStatus: ").Append(CommandStatus).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  UserSessionId: ").Append(UserSessionId).Append("\n");
            sb.Append("  ActivationTime: ").Append(ActivationTime).Append("\n");
            sb.Append("  CustomTag50: ").Append(CustomTag50).Append("\n");
            sb.Append("  IsAutomated: ").Append(IsAutomated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Command);
        }

        /// <summary>
        /// Returns true if Command instances are equal
        /// </summary>
        /// <param name="input">Instance of Command to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Command input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.ClOrdId == input.ClOrdId ||
                    (this.ClOrdId != null &&
                    this.ClOrdId.Equals(input.ClOrdId))
                ) && 
                (
                    this.CommandType == input.CommandType ||
                    (this.CommandType != null &&
                    this.CommandType.Equals(input.CommandType))
                ) && 
                (
                    this.CommandStatus == input.CommandStatus ||
                    (this.CommandStatus != null &&
                    this.CommandStatus.Equals(input.CommandStatus))
                ) && 
                (
                    this.SenderId == input.SenderId ||
                    (this.SenderId != null &&
                    this.SenderId.Equals(input.SenderId))
                ) && 
                (
                    this.UserSessionId == input.UserSessionId ||
                    (this.UserSessionId != null &&
                    this.UserSessionId.Equals(input.UserSessionId))
                ) && 
                (
                    this.ActivationTime == input.ActivationTime ||
                    (this.ActivationTime != null &&
                    this.ActivationTime.Equals(input.ActivationTime))
                ) && 
                (
                    this.CustomTag50 == input.CustomTag50 ||
                    (this.CustomTag50 != null &&
                    this.CustomTag50.Equals(input.CustomTag50))
                ) && 
                (
                    this.IsAutomated == input.IsAutomated ||
                    (this.IsAutomated != null &&
                    this.IsAutomated.Equals(input.IsAutomated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.ClOrdId != null)
                    hashCode = hashCode * 59 + this.ClOrdId.GetHashCode();
                if (this.CommandType != null)
                    hashCode = hashCode * 59 + this.CommandType.GetHashCode();
                if (this.CommandStatus != null)
                    hashCode = hashCode * 59 + this.CommandStatus.GetHashCode();
                if (this.SenderId != null)
                    hashCode = hashCode * 59 + this.SenderId.GetHashCode();
                if (this.UserSessionId != null)
                    hashCode = hashCode * 59 + this.UserSessionId.GetHashCode();
                if (this.ActivationTime != null)
                    hashCode = hashCode * 59 + this.ActivationTime.GetHashCode();
                if (this.CustomTag50 != null)
                    hashCode = hashCode * 59 + this.CustomTag50.GetHashCode();
                if (this.IsAutomated != null)
                    hashCode = hashCode * 59 + this.IsAutomated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
