/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// OrderStrategyLink
    /// </summary>
    [DataContract]
        public partial class OrderStrategyLink :  IEquatable<OrderStrategyLink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStrategyLink" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="orderStrategyId">orderStrategyId (required).</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="label">label (required).</param>
        public OrderStrategyLink(long? id = default(long?), long? orderStrategyId = default(long?), long? orderId = default(long?), string label = default(string))
        {
            // to ensure "orderStrategyId" is required (not null)
            if (orderStrategyId == null)
            {
                throw new InvalidDataException("orderStrategyId is a required property for OrderStrategyLink and cannot be null");
            }
            else
            {
                this.OrderStrategyId = orderStrategyId;
            }
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for OrderStrategyLink and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new InvalidDataException("label is a required property for OrderStrategyLink and cannot be null");
            }
            else
            {
                this.Label = label;
            }
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets OrderStrategyId
        /// </summary>
        [DataMember(Name="orderStrategyId", EmitDefaultValue=false)]
        public long? OrderStrategyId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public long? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderStrategyLink {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderStrategyId: ").Append(OrderStrategyId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderStrategyLink);
        }

        /// <summary>
        /// Returns true if OrderStrategyLink instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderStrategyLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderStrategyLink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderStrategyId == input.OrderStrategyId ||
                    (this.OrderStrategyId != null &&
                    this.OrderStrategyId.Equals(input.OrderStrategyId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrderStrategyId != null)
                    hashCode = hashCode * 59 + this.OrderStrategyId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
