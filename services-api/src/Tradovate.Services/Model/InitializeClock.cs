/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// InitializeClock
    /// </summary>
    [DataContract]
        public partial class InitializeClock :  IEquatable<InitializeClock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InitializeClock" /> class.
        /// </summary>
        /// <param name="startTimestamp">startTimestamp (required).</param>
        /// <param name="speed">speed (required).</param>
        /// <param name="initialBalance">initialBalance.</param>
        public InitializeClock(DateTime? startTimestamp = default(DateTime?), int? speed = default(int?), double? initialBalance = default(double?))
        {
            // to ensure "startTimestamp" is required (not null)
            if (startTimestamp == null)
            {
                throw new InvalidDataException("startTimestamp is a required property for InitializeClock and cannot be null");
            }
            else
            {
                this.StartTimestamp = startTimestamp;
            }
            // to ensure "speed" is required (not null)
            if (speed == null)
            {
                throw new InvalidDataException("speed is a required property for InitializeClock and cannot be null");
            }
            else
            {
                this.Speed = speed;
            }
            this.InitialBalance = initialBalance;
        }
        
        /// <summary>
        /// Gets or Sets StartTimestamp
        /// </summary>
        [DataMember(Name="startTimestamp", EmitDefaultValue=false)]
        public DateTime? StartTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [DataMember(Name="speed", EmitDefaultValue=false)]
        public int? Speed { get; set; }

        /// <summary>
        /// Gets or Sets InitialBalance
        /// </summary>
        [DataMember(Name="initialBalance", EmitDefaultValue=false)]
        public double? InitialBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InitializeClock {\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  InitialBalance: ").Append(InitialBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InitializeClock);
        }

        /// <summary>
        /// Returns true if InitializeClock instances are equal
        /// </summary>
        /// <param name="input">Instance of InitializeClock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InitializeClock input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartTimestamp == input.StartTimestamp ||
                    (this.StartTimestamp != null &&
                    this.StartTimestamp.Equals(input.StartTimestamp))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                ) && 
                (
                    this.InitialBalance == input.InitialBalance ||
                    (this.InitialBalance != null &&
                    this.InitialBalance.Equals(input.InitialBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTimestamp != null)
                    hashCode = hashCode * 59 + this.StartTimestamp.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.InitialBalance != null)
                    hashCode = hashCode * 59 + this.InitialBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
