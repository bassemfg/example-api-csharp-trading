/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// AddEntitlementSubscription
    /// </summary>
    [DataContract]
        public partial class AddEntitlementSubscription :  IEquatable<AddEntitlementSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddEntitlementSubscription" /> class.
        /// </summary>
        /// <param name="entitlementId">entitlementId (required).</param>
        /// <param name="creditCardId">creditCardId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="userId">userId.</param>
        public AddEntitlementSubscription(long? entitlementId = default(long?), long? creditCardId = default(long?), long? accountId = default(long?), long? userId = default(long?))
        {
            // to ensure "entitlementId" is required (not null)
            if (entitlementId == null)
            {
                throw new InvalidDataException("entitlementId is a required property for AddEntitlementSubscription and cannot be null");
            }
            else
            {
                this.EntitlementId = entitlementId;
            }
            this.CreditCardId = creditCardId;
            this.AccountId = accountId;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets EntitlementId
        /// </summary>
        [DataMember(Name="entitlementId", EmitDefaultValue=false)]
        public long? EntitlementId { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardId
        /// </summary>
        [DataMember(Name="creditCardId", EmitDefaultValue=false)]
        public long? CreditCardId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddEntitlementSubscription {\n");
            sb.Append("  EntitlementId: ").Append(EntitlementId).Append("\n");
            sb.Append("  CreditCardId: ").Append(CreditCardId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddEntitlementSubscription);
        }

        /// <summary>
        /// Returns true if AddEntitlementSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of AddEntitlementSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddEntitlementSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntitlementId == input.EntitlementId ||
                    (this.EntitlementId != null &&
                    this.EntitlementId.Equals(input.EntitlementId))
                ) && 
                (
                    this.CreditCardId == input.CreditCardId ||
                    (this.CreditCardId != null &&
                    this.CreditCardId.Equals(input.CreditCardId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntitlementId != null)
                    hashCode = hashCode * 59 + this.EntitlementId.GetHashCode();
                if (this.CreditCardId != null)
                    hashCode = hashCode * 59 + this.CreditCardId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
