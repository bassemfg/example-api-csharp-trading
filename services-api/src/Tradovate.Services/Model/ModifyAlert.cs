/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// ModifyAlert
    /// </summary>
    [DataContract]
        public partial class ModifyAlert :  IEquatable<ModifyAlert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyAlert" /> class.
        /// </summary>
        /// <param name="alertId">alertId (required).</param>
        /// <param name="expression">expression (required).</param>
        /// <param name="validUntil">validUntil.</param>
        /// <param name="triggerLimits">triggerLimits.</param>
        /// <param name="message">message.</param>
        public ModifyAlert(long? alertId = default(long?), string expression = default(string), DateTime? validUntil = default(DateTime?), int? triggerLimits = default(int?), string message = default(string))
        {
            // to ensure "alertId" is required (not null)
            if (alertId == null)
            {
                throw new InvalidDataException("alertId is a required property for ModifyAlert and cannot be null");
            }
            else
            {
                this.AlertId = alertId;
            }
            // to ensure "expression" is required (not null)
            if (expression == null)
            {
                throw new InvalidDataException("expression is a required property for ModifyAlert and cannot be null");
            }
            else
            {
                this.Expression = expression;
            }
            this.ValidUntil = validUntil;
            this.TriggerLimits = triggerLimits;
            this.Message = message;
        }
        
        /// <summary>
        /// Gets or Sets AlertId
        /// </summary>
        [DataMember(Name="alertId", EmitDefaultValue=false)]
        public long? AlertId { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public string Expression { get; set; }

        /// <summary>
        /// Gets or Sets ValidUntil
        /// </summary>
        [DataMember(Name="validUntil", EmitDefaultValue=false)]
        public DateTime? ValidUntil { get; set; }

        /// <summary>
        /// Gets or Sets TriggerLimits
        /// </summary>
        [DataMember(Name="triggerLimits", EmitDefaultValue=false)]
        public int? TriggerLimits { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModifyAlert {\n");
            sb.Append("  AlertId: ").Append(AlertId).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  TriggerLimits: ").Append(TriggerLimits).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModifyAlert);
        }

        /// <summary>
        /// Returns true if ModifyAlert instances are equal
        /// </summary>
        /// <param name="input">Instance of ModifyAlert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModifyAlert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AlertId == input.AlertId ||
                    (this.AlertId != null &&
                    this.AlertId.Equals(input.AlertId))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                ) && 
                (
                    this.ValidUntil == input.ValidUntil ||
                    (this.ValidUntil != null &&
                    this.ValidUntil.Equals(input.ValidUntil))
                ) && 
                (
                    this.TriggerLimits == input.TriggerLimits ||
                    (this.TriggerLimits != null &&
                    this.TriggerLimits.Equals(input.TriggerLimits))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlertId != null)
                    hashCode = hashCode * 59 + this.AlertId.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.ValidUntil != null)
                    hashCode = hashCode * 59 + this.ValidUntil.GetHashCode();
                if (this.TriggerLimits != null)
                    hashCode = hashCode * 59 + this.TriggerLimits.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
