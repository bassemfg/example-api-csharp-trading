/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// CashBalanceLog
    /// </summary>
    [DataContract]
        public partial class CashBalanceLog :  IEquatable<CashBalanceLog>, IValidatableObject
    {
        /// <summary>
        /// AutomaticReconciliation, BrokerageFee, CancelledPairedTrade, ClearingFee, Commission, DeskFee, EntitlementSubscription, ExchangeFee, FundTransaction, FundTransactionFee, IPFee, LiquidationFee, ManualAdjustment, MarketDataSubscription, NewSession, NfaFee, OptionsTrade, OrderRoutingFee, TradePaired, TradovateSubscription
        /// </summary>
        /// <value>AutomaticReconciliation, BrokerageFee, CancelledPairedTrade, ClearingFee, Commission, DeskFee, EntitlementSubscription, ExchangeFee, FundTransaction, FundTransactionFee, IPFee, LiquidationFee, ManualAdjustment, MarketDataSubscription, NewSession, NfaFee, OptionsTrade, OrderRoutingFee, TradePaired, TradovateSubscription</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CashChangeTypeEnum
        {
            /// <summary>
            /// Enum AutomaticReconciliation for value: AutomaticReconciliation
            /// </summary>
            [EnumMember(Value = "AutomaticReconciliation")]
            AutomaticReconciliation = 1,
            /// <summary>
            /// Enum BrokerageFee for value: BrokerageFee
            /// </summary>
            [EnumMember(Value = "BrokerageFee")]
            BrokerageFee = 2,
            /// <summary>
            /// Enum CancelledPairedTrade for value: CancelledPairedTrade
            /// </summary>
            [EnumMember(Value = "CancelledPairedTrade")]
            CancelledPairedTrade = 3,
            /// <summary>
            /// Enum ClearingFee for value: ClearingFee
            /// </summary>
            [EnumMember(Value = "ClearingFee")]
            ClearingFee = 4,
            /// <summary>
            /// Enum Commission for value: Commission
            /// </summary>
            [EnumMember(Value = "Commission")]
            Commission = 5,
            /// <summary>
            /// Enum DeskFee for value: DeskFee
            /// </summary>
            [EnumMember(Value = "DeskFee")]
            DeskFee = 6,
            /// <summary>
            /// Enum EntitlementSubscription for value: EntitlementSubscription
            /// </summary>
            [EnumMember(Value = "EntitlementSubscription")]
            EntitlementSubscription = 7,
            /// <summary>
            /// Enum ExchangeFee for value: ExchangeFee
            /// </summary>
            [EnumMember(Value = "ExchangeFee")]
            ExchangeFee = 8,
            /// <summary>
            /// Enum FundTransaction for value: FundTransaction
            /// </summary>
            [EnumMember(Value = "FundTransaction")]
            FundTransaction = 9,
            /// <summary>
            /// Enum FundTransactionFee for value: FundTransactionFee
            /// </summary>
            [EnumMember(Value = "FundTransactionFee")]
            FundTransactionFee = 10,
            /// <summary>
            /// Enum IPFee for value: IPFee
            /// </summary>
            [EnumMember(Value = "IPFee")]
            IPFee = 11,
            /// <summary>
            /// Enum LiquidationFee for value: LiquidationFee
            /// </summary>
            [EnumMember(Value = "LiquidationFee")]
            LiquidationFee = 12,
            /// <summary>
            /// Enum ManualAdjustment for value: ManualAdjustment
            /// </summary>
            [EnumMember(Value = "ManualAdjustment")]
            ManualAdjustment = 13,
            /// <summary>
            /// Enum MarketDataSubscription for value: MarketDataSubscription
            /// </summary>
            [EnumMember(Value = "MarketDataSubscription")]
            MarketDataSubscription = 14,
            /// <summary>
            /// Enum NewSession for value: NewSession
            /// </summary>
            [EnumMember(Value = "NewSession")]
            NewSession = 15,
            /// <summary>
            /// Enum NfaFee for value: NfaFee
            /// </summary>
            [EnumMember(Value = "NfaFee")]
            NfaFee = 16,
            /// <summary>
            /// Enum OptionsTrade for value: OptionsTrade
            /// </summary>
            [EnumMember(Value = "OptionsTrade")]
            OptionsTrade = 17,
            /// <summary>
            /// Enum OrderRoutingFee for value: OrderRoutingFee
            /// </summary>
            [EnumMember(Value = "OrderRoutingFee")]
            OrderRoutingFee = 18,
            /// <summary>
            /// Enum TradePaired for value: TradePaired
            /// </summary>
            [EnumMember(Value = "TradePaired")]
            TradePaired = 19,
            /// <summary>
            /// Enum TradovateSubscription for value: TradovateSubscription
            /// </summary>
            [EnumMember(Value = "TradovateSubscription")]
            TradovateSubscription = 20        }
        /// <summary>
        /// AutomaticReconciliation, BrokerageFee, CancelledPairedTrade, ClearingFee, Commission, DeskFee, EntitlementSubscription, ExchangeFee, FundTransaction, FundTransactionFee, IPFee, LiquidationFee, ManualAdjustment, MarketDataSubscription, NewSession, NfaFee, OptionsTrade, OrderRoutingFee, TradePaired, TradovateSubscription
        /// </summary>
        /// <value>AutomaticReconciliation, BrokerageFee, CancelledPairedTrade, ClearingFee, Commission, DeskFee, EntitlementSubscription, ExchangeFee, FundTransaction, FundTransactionFee, IPFee, LiquidationFee, ManualAdjustment, MarketDataSubscription, NewSession, NfaFee, OptionsTrade, OrderRoutingFee, TradePaired, TradovateSubscription</value>
        [DataMember(Name="cashChangeType", EmitDefaultValue=false)]
        public CashChangeTypeEnum CashChangeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashBalanceLog" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="tradeDate">tradeDate (required).</param>
        /// <param name="currencyId">currencyId (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="realizedPnL">realizedPnL.</param>
        /// <param name="weekRealizedPnL">weekRealizedPnL.</param>
        /// <param name="cashChangeType">AutomaticReconciliation, BrokerageFee, CancelledPairedTrade, ClearingFee, Commission, DeskFee, EntitlementSubscription, ExchangeFee, FundTransaction, FundTransactionFee, IPFee, LiquidationFee, ManualAdjustment, MarketDataSubscription, NewSession, NfaFee, OptionsTrade, OrderRoutingFee, TradePaired, TradovateSubscription (required).</param>
        /// <param name="fillPairId">fillPairId.</param>
        /// <param name="fillId">fillId.</param>
        /// <param name="fundTransactionId">fundTransactionId.</param>
        /// <param name="comment">comment.</param>
        /// <param name="delta">delta (required).</param>
        public CashBalanceLog(long? id = default(long?), long? accountId = default(long?), DateTime? timestamp = default(DateTime?), TradeDate tradeDate = default(TradeDate), long? currencyId = default(long?), double? amount = default(double?), double? realizedPnL = default(double?), double? weekRealizedPnL = default(double?), CashChangeTypeEnum cashChangeType = default(CashChangeTypeEnum), long? fillPairId = default(long?), long? fillId = default(long?), long? fundTransactionId = default(long?), string comment = default(string), double? delta = default(double?))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for CashBalanceLog and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for CashBalanceLog and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "tradeDate" is required (not null)
            if (tradeDate == null)
            {
                throw new InvalidDataException("tradeDate is a required property for CashBalanceLog and cannot be null");
            }
            else
            {
                this.TradeDate = tradeDate;
            }
            // to ensure "currencyId" is required (not null)
            if (currencyId == null)
            {
                throw new InvalidDataException("currencyId is a required property for CashBalanceLog and cannot be null");
            }
            else
            {
                this.CurrencyId = currencyId;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for CashBalanceLog and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "cashChangeType" is required (not null)
            if (cashChangeType == null)
            {
                throw new InvalidDataException("cashChangeType is a required property for CashBalanceLog and cannot be null");
            }
            else
            {
                this.CashChangeType = cashChangeType;
            }
            // to ensure "delta" is required (not null)
            if (delta == null)
            {
                throw new InvalidDataException("delta is a required property for CashBalanceLog and cannot be null");
            }
            else
            {
                this.Delta = delta;
            }
            this.Id = id;
            this.RealizedPnL = realizedPnL;
            this.WeekRealizedPnL = weekRealizedPnL;
            this.FillPairId = fillPairId;
            this.FillId = fillId;
            this.FundTransactionId = fundTransactionId;
            this.Comment = comment;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets TradeDate
        /// </summary>
        [DataMember(Name="tradeDate", EmitDefaultValue=false)]
        public TradeDate TradeDate { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="currencyId", EmitDefaultValue=false)]
        public long? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets RealizedPnL
        /// </summary>
        [DataMember(Name="realizedPnL", EmitDefaultValue=false)]
        public double? RealizedPnL { get; set; }

        /// <summary>
        /// Gets or Sets WeekRealizedPnL
        /// </summary>
        [DataMember(Name="weekRealizedPnL", EmitDefaultValue=false)]
        public double? WeekRealizedPnL { get; set; }


        /// <summary>
        /// Gets or Sets FillPairId
        /// </summary>
        [DataMember(Name="fillPairId", EmitDefaultValue=false)]
        public long? FillPairId { get; set; }

        /// <summary>
        /// Gets or Sets FillId
        /// </summary>
        [DataMember(Name="fillId", EmitDefaultValue=false)]
        public long? FillId { get; set; }

        /// <summary>
        /// Gets or Sets FundTransactionId
        /// </summary>
        [DataMember(Name="fundTransactionId", EmitDefaultValue=false)]
        public long? FundTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Delta
        /// </summary>
        [DataMember(Name="delta", EmitDefaultValue=false)]
        public double? Delta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashBalanceLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  RealizedPnL: ").Append(RealizedPnL).Append("\n");
            sb.Append("  WeekRealizedPnL: ").Append(WeekRealizedPnL).Append("\n");
            sb.Append("  CashChangeType: ").Append(CashChangeType).Append("\n");
            sb.Append("  FillPairId: ").Append(FillPairId).Append("\n");
            sb.Append("  FillId: ").Append(FillId).Append("\n");
            sb.Append("  FundTransactionId: ").Append(FundTransactionId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashBalanceLog);
        }

        /// <summary>
        /// Returns true if CashBalanceLog instances are equal
        /// </summary>
        /// <param name="input">Instance of CashBalanceLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashBalanceLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.TradeDate == input.TradeDate ||
                    (this.TradeDate != null &&
                    this.TradeDate.Equals(input.TradeDate))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.RealizedPnL == input.RealizedPnL ||
                    (this.RealizedPnL != null &&
                    this.RealizedPnL.Equals(input.RealizedPnL))
                ) && 
                (
                    this.WeekRealizedPnL == input.WeekRealizedPnL ||
                    (this.WeekRealizedPnL != null &&
                    this.WeekRealizedPnL.Equals(input.WeekRealizedPnL))
                ) && 
                (
                    this.CashChangeType == input.CashChangeType ||
                    (this.CashChangeType != null &&
                    this.CashChangeType.Equals(input.CashChangeType))
                ) && 
                (
                    this.FillPairId == input.FillPairId ||
                    (this.FillPairId != null &&
                    this.FillPairId.Equals(input.FillPairId))
                ) && 
                (
                    this.FillId == input.FillId ||
                    (this.FillId != null &&
                    this.FillId.Equals(input.FillId))
                ) && 
                (
                    this.FundTransactionId == input.FundTransactionId ||
                    (this.FundTransactionId != null &&
                    this.FundTransactionId.Equals(input.FundTransactionId))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Delta == input.Delta ||
                    (this.Delta != null &&
                    this.Delta.Equals(input.Delta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.TradeDate != null)
                    hashCode = hashCode * 59 + this.TradeDate.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.RealizedPnL != null)
                    hashCode = hashCode * 59 + this.RealizedPnL.GetHashCode();
                if (this.WeekRealizedPnL != null)
                    hashCode = hashCode * 59 + this.WeekRealizedPnL.GetHashCode();
                if (this.CashChangeType != null)
                    hashCode = hashCode * 59 + this.CashChangeType.GetHashCode();
                if (this.FillPairId != null)
                    hashCode = hashCode * 59 + this.FillPairId.GetHashCode();
                if (this.FillId != null)
                    hashCode = hashCode * 59 + this.FillId.GetHashCode();
                if (this.FundTransactionId != null)
                    hashCode = hashCode * 59 + this.FundTransactionId.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Delta != null)
                    hashCode = hashCode * 59 + this.Delta.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
