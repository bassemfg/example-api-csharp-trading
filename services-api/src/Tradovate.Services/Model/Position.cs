/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Tradovate.Services.Client.SwaggerDateConverter;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// Position
    /// </summary>
    [DataContract]
        public partial class Position :  IEquatable<Position>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="contractId">contractId (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="tradeDate">tradeDate (required).</param>
        /// <param name="netPos">netPos (required).</param>
        /// <param name="netPrice">netPrice.</param>
        /// <param name="bought">bought (required).</param>
        /// <param name="boughtValue">boughtValue (required).</param>
        /// <param name="sold">sold (required).</param>
        /// <param name="soldValue">soldValue (required).</param>
        /// <param name="prevPos">prevPos (required).</param>
        /// <param name="prevPrice">prevPrice.</param>
        public Position(long? id = default(long?), long? accountId = default(long?), long? contractId = default(long?), DateTime? timestamp = default(DateTime?), TradeDate tradeDate = default(TradeDate), int? netPos = default(int?), double? netPrice = default(double?), int? bought = default(int?), double? boughtValue = default(double?), int? sold = default(int?), double? soldValue = default(double?), int? prevPos = default(int?), double? prevPrice = default(double?))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for Position and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            // to ensure "contractId" is required (not null)
            if (contractId == null)
            {
                throw new InvalidDataException("contractId is a required property for Position and cannot be null");
            }
            else
            {
                this.ContractId = contractId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for Position and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "tradeDate" is required (not null)
            if (tradeDate == null)
            {
                throw new InvalidDataException("tradeDate is a required property for Position and cannot be null");
            }
            else
            {
                this.TradeDate = tradeDate;
            }
            // to ensure "netPos" is required (not null)
            if (netPos == null)
            {
                throw new InvalidDataException("netPos is a required property for Position and cannot be null");
            }
            else
            {
                this.NetPos = netPos;
            }
            // to ensure "bought" is required (not null)
            if (bought == null)
            {
                throw new InvalidDataException("bought is a required property for Position and cannot be null");
            }
            else
            {
                this.Bought = bought;
            }
            // to ensure "boughtValue" is required (not null)
            if (boughtValue == null)
            {
                throw new InvalidDataException("boughtValue is a required property for Position and cannot be null");
            }
            else
            {
                this.BoughtValue = boughtValue;
            }
            // to ensure "sold" is required (not null)
            if (sold == null)
            {
                throw new InvalidDataException("sold is a required property for Position and cannot be null");
            }
            else
            {
                this.Sold = sold;
            }
            // to ensure "soldValue" is required (not null)
            if (soldValue == null)
            {
                throw new InvalidDataException("soldValue is a required property for Position and cannot be null");
            }
            else
            {
                this.SoldValue = soldValue;
            }
            // to ensure "prevPos" is required (not null)
            if (prevPos == null)
            {
                throw new InvalidDataException("prevPos is a required property for Position and cannot be null");
            }
            else
            {
                this.PrevPos = prevPos;
            }
            this.Id = id;
            this.NetPrice = netPrice;
            this.PrevPrice = prevPrice;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public long? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public long? ContractId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets TradeDate
        /// </summary>
        [DataMember(Name="tradeDate", EmitDefaultValue=false)]
        public TradeDate TradeDate { get; set; }

        /// <summary>
        /// Gets or Sets NetPos
        /// </summary>
        [DataMember(Name="netPos", EmitDefaultValue=false)]
        public int? NetPos { get; set; }

        /// <summary>
        /// Gets or Sets NetPrice
        /// </summary>
        [DataMember(Name="netPrice", EmitDefaultValue=false)]
        public double? NetPrice { get; set; }

        /// <summary>
        /// Gets or Sets Bought
        /// </summary>
        [DataMember(Name="bought", EmitDefaultValue=false)]
        public int? Bought { get; set; }

        /// <summary>
        /// Gets or Sets BoughtValue
        /// </summary>
        [DataMember(Name="boughtValue", EmitDefaultValue=false)]
        public double? BoughtValue { get; set; }

        /// <summary>
        /// Gets or Sets Sold
        /// </summary>
        [DataMember(Name="sold", EmitDefaultValue=false)]
        public int? Sold { get; set; }

        /// <summary>
        /// Gets or Sets SoldValue
        /// </summary>
        [DataMember(Name="soldValue", EmitDefaultValue=false)]
        public double? SoldValue { get; set; }

        /// <summary>
        /// Gets or Sets PrevPos
        /// </summary>
        [DataMember(Name="prevPos", EmitDefaultValue=false)]
        public int? PrevPos { get; set; }

        /// <summary>
        /// Gets or Sets PrevPrice
        /// </summary>
        [DataMember(Name="prevPrice", EmitDefaultValue=false)]
        public double? PrevPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Position {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  NetPos: ").Append(NetPos).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  Bought: ").Append(Bought).Append("\n");
            sb.Append("  BoughtValue: ").Append(BoughtValue).Append("\n");
            sb.Append("  Sold: ").Append(Sold).Append("\n");
            sb.Append("  SoldValue: ").Append(SoldValue).Append("\n");
            sb.Append("  PrevPos: ").Append(PrevPos).Append("\n");
            sb.Append("  PrevPrice: ").Append(PrevPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Position);
        }

        /// <summary>
        /// Returns true if Position instances are equal
        /// </summary>
        /// <param name="input">Instance of Position to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Position input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.TradeDate == input.TradeDate ||
                    (this.TradeDate != null &&
                    this.TradeDate.Equals(input.TradeDate))
                ) && 
                (
                    this.NetPos == input.NetPos ||
                    (this.NetPos != null &&
                    this.NetPos.Equals(input.NetPos))
                ) && 
                (
                    this.NetPrice == input.NetPrice ||
                    (this.NetPrice != null &&
                    this.NetPrice.Equals(input.NetPrice))
                ) && 
                (
                    this.Bought == input.Bought ||
                    (this.Bought != null &&
                    this.Bought.Equals(input.Bought))
                ) && 
                (
                    this.BoughtValue == input.BoughtValue ||
                    (this.BoughtValue != null &&
                    this.BoughtValue.Equals(input.BoughtValue))
                ) && 
                (
                    this.Sold == input.Sold ||
                    (this.Sold != null &&
                    this.Sold.Equals(input.Sold))
                ) && 
                (
                    this.SoldValue == input.SoldValue ||
                    (this.SoldValue != null &&
                    this.SoldValue.Equals(input.SoldValue))
                ) && 
                (
                    this.PrevPos == input.PrevPos ||
                    (this.PrevPos != null &&
                    this.PrevPos.Equals(input.PrevPos))
                ) && 
                (
                    this.PrevPrice == input.PrevPrice ||
                    (this.PrevPrice != null &&
                    this.PrevPrice.Equals(input.PrevPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.ContractId != null)
                    hashCode = hashCode * 59 + this.ContractId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.TradeDate != null)
                    hashCode = hashCode * 59 + this.TradeDate.GetHashCode();
                if (this.NetPos != null)
                    hashCode = hashCode * 59 + this.NetPos.GetHashCode();
                if (this.NetPrice != null)
                    hashCode = hashCode * 59 + this.NetPrice.GetHashCode();
                if (this.Bought != null)
                    hashCode = hashCode * 59 + this.Bought.GetHashCode();
                if (this.BoughtValue != null)
                    hashCode = hashCode * 59 + this.BoughtValue.GetHashCode();
                if (this.Sold != null)
                    hashCode = hashCode * 59 + this.Sold.GetHashCode();
                if (this.SoldValue != null)
                    hashCode = hashCode * 59 + this.SoldValue.GetHashCode();
                if (this.PrevPos != null)
                    hashCode = hashCode * 59 + this.PrevPos.GetHashCode();
                if (this.PrevPrice != null)
                    hashCode = hashCode * 59 + this.PrevPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
