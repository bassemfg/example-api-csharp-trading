/* 
 * Tradovate API
 *
 * Tradovate API provides an access to the complete set of robust Tradovate functionality.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Tradovate.Services.Client;
using Tradovate.Services.Model;

namespace Tradovate.Services.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPositionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type related to Position entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Position entity</param>
        /// <returns>List&lt;FillPair&gt;</returns>
        List<FillPair> FillPairDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type related to Position entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Position entity</param>
        /// <returns>ApiResponse of List&lt;FillPair&gt;</returns>
        ApiResponse<List<FillPair>> FillPairDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of FillPair type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>FillPair</returns>
        FillPair FillPairItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of FillPair type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of FillPair</returns>
        ApiResponse<FillPair> FillPairItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of FillPair type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;FillPair&gt;</returns>
        List<FillPair> FillPairItems (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of FillPair type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;FillPair&gt;</returns>
        ApiResponse<List<FillPair>> FillPairItemsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type related to multiple entities of Position type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Position entities</param>
        /// <returns>List&lt;FillPair&gt;</returns>
        List<FillPair> FillPairLDependents (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type related to multiple entities of Position type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Position entities</param>
        /// <returns>ApiResponse of List&lt;FillPair&gt;</returns>
        ApiResponse<List<FillPair>> FillPairLDependentsWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FillPair&gt;</returns>
        List<FillPair> FillPairList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FillPair&gt;</returns>
        ApiResponse<List<FillPair>> FillPairListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>List&lt;Position&gt;</returns>
        List<Position> PositionDependents (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        ApiResponse<List<Position>> PositionDependentsWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Position type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Position</returns>
        Position PositionFind (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Position type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> PositionFindWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Position type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Position</returns>
        Position PositionItem (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Position type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> PositionItemWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Position type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Position&gt;</returns>
        List<Position> PositionItems (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Position type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        ApiResponse<List<Position>> PositionItemsWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>List&lt;Position&gt;</returns>
        List<Position> PositionLDependents (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        ApiResponse<List<Position>> PositionLDependentsWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Position&gt;</returns>
        List<Position> PositionList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        ApiResponse<List<Position>> PositionListWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type related to Position entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Position entity</param>
        /// <returns>Task of List&lt;FillPair&gt;</returns>
        System.Threading.Tasks.Task<List<FillPair>> FillPairDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type related to Position entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Position entity</param>
        /// <returns>Task of ApiResponse (List&lt;FillPair&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FillPair>>> FillPairDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of FillPair type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of FillPair</returns>
        System.Threading.Tasks.Task<FillPair> FillPairItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of FillPair type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (FillPair)</returns>
        System.Threading.Tasks.Task<ApiResponse<FillPair>> FillPairItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of FillPair type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;FillPair&gt;</returns>
        System.Threading.Tasks.Task<List<FillPair>> FillPairItemsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of FillPair type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;FillPair&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FillPair>>> FillPairItemsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type related to multiple entities of Position type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Position entities</param>
        /// <returns>Task of List&lt;FillPair&gt;</returns>
        System.Threading.Tasks.Task<List<FillPair>> FillPairLDependentsAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type related to multiple entities of Position type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Position entities</param>
        /// <returns>Task of ApiResponse (List&lt;FillPair&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FillPair>>> FillPairLDependentsAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FillPair&gt;</returns>
        System.Threading.Tasks.Task<List<FillPair>> FillPairListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of FillPair type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FillPair&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FillPair>>> FillPairListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        System.Threading.Tasks.Task<List<Position>> PositionDependentsAsync (long? masterid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type related to Account entity
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionDependentsAsyncWithHttpInfo (long? masterid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Position type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Position</returns>
        System.Threading.Tasks.Task<Position> PositionFindAsync (string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Position type by its name
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Position)</returns>
        System.Threading.Tasks.Task<ApiResponse<Position>> PositionFindAsyncWithHttpInfo (string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Position type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Position</returns>
        System.Threading.Tasks.Task<Position> PositionItemAsync (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves an entity of Position type by its id
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Position)</returns>
        System.Threading.Tasks.Task<ApiResponse<Position>> PositionItemAsyncWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Position type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        System.Threading.Tasks.Task<List<Position>> PositionItemsAsync (List<int?> ids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves multiple entities of Position type by its ids
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionItemsAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        System.Threading.Tasks.Task<List<Position>> PositionLDependentsAsync (List<int?> masterids);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type related to multiple entities of Account type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionLDependentsAsyncWithHttpInfo (List<int?> masterids);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Position&gt;</returns>
        System.Threading.Tasks.Task<List<Position>> PositionListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all entities of Position type
        /// </remarks>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionListAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PositionsApi : IPositionsApi
    {
        private Tradovate.Services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PositionsApi(String basePath)
        {
            this.Configuration = new Tradovate.Services.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PositionsApi()
        {
            this.Configuration = Tradovate.Services.Client.Configuration.Default;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PositionsApi(Tradovate.Services.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Tradovate.Services.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Tradovate.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tradovate.Services.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tradovate.Services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieves all entities of FillPair type related to Position entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Position entity</param>
        /// <returns>List&lt;FillPair&gt;</returns>
        public List<FillPair> FillPairDependents (long? masterid)
        {
             ApiResponse<List<FillPair>> localVarResponse = FillPairDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of FillPair type related to Position entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Position entity</param>
        /// <returns>ApiResponse of List&lt;FillPair&gt;</returns>
        public ApiResponse< List<FillPair> > FillPairDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling PositionsApi->FillPairDependents");

            var localVarPath = "/fillPair/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FillPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FillPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FillPair>)));
        }

        /// <summary>
        ///  Retrieves all entities of FillPair type related to Position entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Position entity</param>
        /// <returns>Task of List&lt;FillPair&gt;</returns>
        public async System.Threading.Tasks.Task<List<FillPair>> FillPairDependentsAsync (long? masterid)
        {
             ApiResponse<List<FillPair>> localVarResponse = await FillPairDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of FillPair type related to Position entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Position entity</param>
        /// <returns>Task of ApiResponse (List&lt;FillPair&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FillPair>>> FillPairDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling PositionsApi->FillPairDependents");

            var localVarPath = "/fillPair/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FillPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FillPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FillPair>)));
        }

        /// <summary>
        ///  Retrieves an entity of FillPair type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>FillPair</returns>
        public FillPair FillPairItem (long? id)
        {
             ApiResponse<FillPair> localVarResponse = FillPairItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of FillPair type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of FillPair</returns>
        public ApiResponse< FillPair > FillPairItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PositionsApi->FillPairItem");

            var localVarPath = "/fillPair/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FillPair>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FillPair) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FillPair)));
        }

        /// <summary>
        ///  Retrieves an entity of FillPair type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of FillPair</returns>
        public async System.Threading.Tasks.Task<FillPair> FillPairItemAsync (long? id)
        {
             ApiResponse<FillPair> localVarResponse = await FillPairItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of FillPair type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (FillPair)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FillPair>> FillPairItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PositionsApi->FillPairItem");

            var localVarPath = "/fillPair/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FillPair>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FillPair) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FillPair)));
        }

        /// <summary>
        ///  Retrieves multiple entities of FillPair type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;FillPair&gt;</returns>
        public List<FillPair> FillPairItems (List<int?> ids)
        {
             ApiResponse<List<FillPair>> localVarResponse = FillPairItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of FillPair type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;FillPair&gt;</returns>
        public ApiResponse< List<FillPair> > FillPairItemsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling PositionsApi->FillPairItems");

            var localVarPath = "/fillPair/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FillPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FillPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FillPair>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of FillPair type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;FillPair&gt;</returns>
        public async System.Threading.Tasks.Task<List<FillPair>> FillPairItemsAsync (List<int?> ids)
        {
             ApiResponse<List<FillPair>> localVarResponse = await FillPairItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of FillPair type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;FillPair&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FillPair>>> FillPairItemsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling PositionsApi->FillPairItems");

            var localVarPath = "/fillPair/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FillPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FillPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FillPair>)));
        }

        /// <summary>
        ///  Retrieves all entities of FillPair type related to multiple entities of Position type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Position entities</param>
        /// <returns>List&lt;FillPair&gt;</returns>
        public List<FillPair> FillPairLDependents (List<int?> masterids)
        {
             ApiResponse<List<FillPair>> localVarResponse = FillPairLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of FillPair type related to multiple entities of Position type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Position entities</param>
        /// <returns>ApiResponse of List&lt;FillPair&gt;</returns>
        public ApiResponse< List<FillPair> > FillPairLDependentsWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling PositionsApi->FillPairLDependents");

            var localVarPath = "/fillPair/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FillPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FillPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FillPair>)));
        }

        /// <summary>
        ///  Retrieves all entities of FillPair type related to multiple entities of Position type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Position entities</param>
        /// <returns>Task of List&lt;FillPair&gt;</returns>
        public async System.Threading.Tasks.Task<List<FillPair>> FillPairLDependentsAsync (List<int?> masterids)
        {
             ApiResponse<List<FillPair>> localVarResponse = await FillPairLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of FillPair type related to multiple entities of Position type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Position entities</param>
        /// <returns>Task of ApiResponse (List&lt;FillPair&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FillPair>>> FillPairLDependentsAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling PositionsApi->FillPairLDependents");

            var localVarPath = "/fillPair/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FillPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FillPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FillPair>)));
        }

        /// <summary>
        ///  Retrieves all entities of FillPair type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FillPair&gt;</returns>
        public List<FillPair> FillPairList ()
        {
             ApiResponse<List<FillPair>> localVarResponse = FillPairListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of FillPair type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FillPair&gt;</returns>
        public ApiResponse< List<FillPair> > FillPairListWithHttpInfo ()
        {

            var localVarPath = "/fillPair/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FillPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FillPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FillPair>)));
        }

        /// <summary>
        ///  Retrieves all entities of FillPair type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FillPair&gt;</returns>
        public async System.Threading.Tasks.Task<List<FillPair>> FillPairListAsync ()
        {
             ApiResponse<List<FillPair>> localVarResponse = await FillPairListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of FillPair type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FillPair&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FillPair>>> FillPairListAsyncWithHttpInfo ()
        {

            var localVarPath = "/fillPair/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillPairList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FillPair>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FillPair>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FillPair>)));
        }

        /// <summary>
        ///  Retrieves all entities of Position type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>List&lt;Position&gt;</returns>
        public List<Position> PositionDependents (long? masterid)
        {
             ApiResponse<List<Position>> localVarResponse = PositionDependentsWithHttpInfo(masterid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Position type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        public ApiResponse< List<Position> > PositionDependentsWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling PositionsApi->PositionDependents");

            var localVarPath = "/position/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Position>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
        }

        /// <summary>
        ///  Retrieves all entities of Position type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        public async System.Threading.Tasks.Task<List<Position>> PositionDependentsAsync (long? masterid)
        {
             ApiResponse<List<Position>> localVarResponse = await PositionDependentsAsyncWithHttpInfo(masterid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Position type related to Account entity
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterid">id of Account entity</param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionDependentsAsyncWithHttpInfo (long? masterid)
        {
            // verify the required parameter 'masterid' is set
            if (masterid == null)
                throw new ApiException(400, "Missing required parameter 'masterid' when calling PositionsApi->PositionDependents");

            var localVarPath = "/position/deps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "masterid", masterid)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Position>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
        }

        /// <summary>
        ///  Retrieves an entity of Position type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Position</returns>
        public Position PositionFind (string name)
        {
             ApiResponse<Position> localVarResponse = PositionFindWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Position type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse< Position > PositionFindWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PositionsApi->PositionFind");

            var localVarPath = "/position/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Position) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
        }

        /// <summary>
        ///  Retrieves an entity of Position type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of Position</returns>
        public async System.Threading.Tasks.Task<Position> PositionFindAsync (string name)
        {
             ApiResponse<Position> localVarResponse = await PositionFindAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Position type by its name
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Position>> PositionFindAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PositionsApi->PositionFind");

            var localVarPath = "/position/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionFind", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Position) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
        }

        /// <summary>
        ///  Retrieves an entity of Position type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Position</returns>
        public Position PositionItem (long? id)
        {
             ApiResponse<Position> localVarResponse = PositionItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves an entity of Position type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse< Position > PositionItemWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PositionsApi->PositionItem");

            var localVarPath = "/position/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Position) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
        }

        /// <summary>
        ///  Retrieves an entity of Position type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Position</returns>
        public async System.Threading.Tasks.Task<Position> PositionItemAsync (long? id)
        {
             ApiResponse<Position> localVarResponse = await PositionItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves an entity of Position type by its id
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Position>> PositionItemAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PositionsApi->PositionItem");

            var localVarPath = "/position/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Position) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Position type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>List&lt;Position&gt;</returns>
        public List<Position> PositionItems (List<int?> ids)
        {
             ApiResponse<List<Position>> localVarResponse = PositionItemsWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves multiple entities of Position type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        public ApiResponse< List<Position> > PositionItemsWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling PositionsApi->PositionItems");

            var localVarPath = "/position/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Position>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
        }

        /// <summary>
        ///  Retrieves multiple entities of Position type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        public async System.Threading.Tasks.Task<List<Position>> PositionItemsAsync (List<int?> ids)
        {
             ApiResponse<List<Position>> localVarResponse = await PositionItemsAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves multiple entities of Position type by its ids
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionItemsAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling PositionsApi->PositionItems");

            var localVarPath = "/position/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Position>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
        }

        /// <summary>
        ///  Retrieves all entities of Position type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>List&lt;Position&gt;</returns>
        public List<Position> PositionLDependents (List<int?> masterids)
        {
             ApiResponse<List<Position>> localVarResponse = PositionLDependentsWithHttpInfo(masterids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Position type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        public ApiResponse< List<Position> > PositionLDependentsWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling PositionsApi->PositionLDependents");

            var localVarPath = "/position/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Position>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
        }

        /// <summary>
        ///  Retrieves all entities of Position type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        public async System.Threading.Tasks.Task<List<Position>> PositionLDependentsAsync (List<int?> masterids)
        {
             ApiResponse<List<Position>> localVarResponse = await PositionLDependentsAsyncWithHttpInfo(masterids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Position type related to multiple entities of Account type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterids">ids of Account entities</param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionLDependentsAsyncWithHttpInfo (List<int?> masterids)
        {
            // verify the required parameter 'masterids' is set
            if (masterids == null)
                throw new ApiException(400, "Missing required parameter 'masterids' when calling PositionsApi->PositionLDependents");

            var localVarPath = "/position/ldeps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (masterids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "masterids", masterids)); // query parameter
            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionLDependents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Position>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
        }

        /// <summary>
        ///  Retrieves all entities of Position type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Position&gt;</returns>
        public List<Position> PositionList ()
        {
             ApiResponse<List<Position>> localVarResponse = PositionListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves all entities of Position type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        public ApiResponse< List<Position> > PositionListWithHttpInfo ()
        {

            var localVarPath = "/position/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Position>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
        }

        /// <summary>
        ///  Retrieves all entities of Position type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Position&gt;</returns>
        public async System.Threading.Tasks.Task<List<Position>> PositionListAsync ()
        {
             ApiResponse<List<Position>> localVarResponse = await PositionListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves all entities of Position type
        /// </summary>
        /// <exception cref="Tradovate.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionListAsyncWithHttpInfo ()
        {

            var localVarPath = "/position/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer_access_token) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Position>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
        }

    }
}
